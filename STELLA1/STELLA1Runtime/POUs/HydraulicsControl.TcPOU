<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="HydraulicsControl" Id="{6bf4055d-2300-4039-bb16-5b9f94622e06}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM HydraulicsControl
VAR_INPUT
	// start the hydraulics
	manual_start:		BOOL := FALSE;
	// stop the hydraulics
	manual_stop: 		BOOL;
	// reset any hydraulics error
	reset: 		BOOL;
	// manual override to start the suction pump
	suction_manual:	BOOL;
	//manual override to stop the pump
	pump_manual_stop: BOOL;
END_VAR
VAR_OUTPUT
	// status of the brake: is the brake open?
	brake_open:			BOOL;
	// is the brake closed?
	brake_closed:		BOOL;
	// pump is running, but the pressure remains low
	pressure_failure:	BOOL;
	// suction was started, but it is not running
	suction_failure:	BOOL;
	// main pump is running but suction has a timeout
	hydraulics_failure:	BOOL;
	// oil is low
	oil_low:			BOOL;
	// oil is high (unused?)
	oil_high:			BOOL;
	// oil pressure is 25 bars
	oil_pressure_OK:	BOOL;
	// oil is on reserve
	oil_warning:		BOOL;
	// oil filter is dirty
	oil_filter_dirty:	BOOL;
	// oil is below 10°C
	oil_cold:			BOOL;
	// oil is above 50°C
	oil_hot:			BOOL;
	// main pump is running
	pump_running:		BOOL;
	// suction pump is running
	suction_running :	BOOL := FALSE;
	// error condition
	error: 				BOOL;
END_VAR
VAR
	// command to open the brake
	iopen_brake:	BOOL := FALSE;
	// command to open the brake
	iclose_brake: BOOL;
	// internal command to start pump
	istart:	BOOL := FALSE;
	// internal command to stop pump
	istop:	BOOL;
	// monitors the pressure of the pump is running
	pressure_watchdog:	TON;
	// monitors the activation of the suction pump
	suction_watchdog: TON;
	// watch the hydraulics and suction pumps
	hydraulics_watchdog: TON;
	// the suction pump is activated for at least 55s when maximum is reached
	suction_pump_timer: TOF;
	// represents the state of the main pump
	oil_pump_state:		RS;
	// represents the state of the brake
	brake_state: 		RS;
	// wait for the brake to open after pressure has been established
	brake_open_delay:	TON;
	// report brake opend after a short delay
	brake_opened_delay:	TON;
	// error state (set dominant)
	error_state:	SR;
	HydraulicsLog,
	PumpLog,
	ReserveLog,
	oil_low_log,
	FilterLog,
	OverTemperatureLog,
	UnderTemperatureLog,
	SuctionLog,
	BreakClearingWarning,
	BreakHydraulicsWarning: FB_EventLog;
	
	// measures the operating cycle of the suction pump
	suction_timer : FB_Timer;
	StatusWord, LastStatus:	UDINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* 
Main control Logic for the Hydraulics system
* power on delay for main pump and suction pump
* start main pump if main control is ready (button pressed or remote)
* start suction pump if maximum in pan is reached
* suction pump runs for 60 seconds
* stop main pump if oil is low
* stop main pump if pressure fails for 10 seconds
*)
oil_low := NOT GVL_Hydraulics.oil_low;
oil_high := NOT GVL_Hydraulics.oil_high;
oil_warning := GVL_Hydraulics.oil_reserve;
oil_pressure_OK := GVL_Hydraulics.oil_pressure_OK;
oil_filter_dirty := NOT GVL_Hydraulics.oilfilter_dirty;
oil_cold := NOT GVL_Hydraulics.oil_undertemperature;
oil_hot := GVL_Hydraulics.oil_overtemperature;
pump_running := GVL_Hydraulics.pump_running;
suction_running := GVL_Hydraulics.suction_running;

IF manual_stop THEN
	manual_start := FALSE;
END_IF

error_state(SET1 := pressure_failure OR	suction_failure OR hydraulics_failure OR oil_low,
			RESET := reset,
			Q1 => error);

oil_pump_state(SET := manual_start OR istart,
				RESET1 := manual_stop OR istop OR error OR NOT Transformer.power_ok OR pump_manual_stop);

GVL_Hydraulics.oil_pump_enable := oil_pump_state.Q1;

IF NOT pump_running THEN
	manual_stop := FALSE;
	istop := FALSE;
END_IF
(* This section controls the hydraulic brake responsible for azimuth and elevation. 
Especially the elevation is imbalanced if not in the position control loop. 
The brake must only be opened, if the elevation drive is activated concurrently.
*)
// reset the open_brake command if the close_brake is active


// wait for pressure to build up (hack for oil_pressure_ok)
brake_open_delay(IN := pump_running AND oil_pressure_OK,
				PT := T#3S);
//manually or remotly open brake. Close brake on limit switch. Wait n seconds after pump is on
//hold the brake, if we reach the az-limit	
// close the brake if the pump is not running	

IF iclose_brake OR NOT pump_running THEN 
	iopen_brake := FALSE;
END_IF
		
brake_state(SET := brake_open_delay.Q AND iopen_brake AND MAIN.brake_clearing,
			RESET1 := GVL_Telescope.azimut_limit_switch 
					  OR iclose_brake 
					  OR NOT pump_running
					  OR NOT MAIN.brake_clearing,
			Q1 => GVL_Telescope.brake_azimuth_eve);

brake_opened_delay(	IN :=brake_state.Q1, 
					PT := T#1000MS,
					Q => brake_open);

brake_closed := NOT brake_open;
IF brake_closed THEN
	iclose_brake := FALSE;
END_IF

(* This is the end of the brake control section *)

// measure suction pump cycle
suction_timer(	bStart := suction_running AND NOT suction_pump_timer.Q, 
				bStop := GVL_Hydraulics.oilpan_maximum);  

suction_pump_timer(IN := Transformer.phase_available AND 
						GVL_Hydraulics.oilpan_maximum,
					PT := T#90S,
					Q => GVL_Hydraulics.oil_suction_enable);
GVL_Hydraulics.oil_suction_enable := suction_pump_timer.Q OR suction_manual;					
suction_watchdog(IN := GVL_Hydraulics.oil_suction_enable AND NOT suction_running,
					PT := T#10S,
					Q => suction_failure);
					
pressure_watchdog(IN := GVL_Hydraulics.oil_pump_enable AND 
						NOT oil_pressure_OK,
					PT := T#30S,
				  Q => pressure_failure);
hydraulics_watchdog(IN := pump_running AND NOT suction_running,
						PT := T#140S,
						Q => hydraulics_failure);

(*
oil_low := NOT GVL_Hydraulics.oil_low;
oil_high := NOT GVL_Hydraulics.oil_high;
oil_warning := GVL_Hydraulics.oil_reserve;
// Michi Email 22.10.2020 True = OK
oil_pressure_OK := GVL_Hydraulics.oil_pressure_OK;
oil_filter_dirty := NOT GVL_Hydraulics.oilfilter_dirty;
oil_cold := NOT GVL_Hydraulics.oil_undertemperature;
oil_hot := GVL_Hydraulics.oil_overtemperature;
pump_running := GVL_Hydraulics.pump_running;
suction_running := GVL_Hydraulics.suction_running;

*)
StatusWord.0 := oil_low;
StatusWord.1 := oil_high;
StatusWord.2 := oil_warning;
StatusWord.3 := oil_pressure_OK;
StatusWord.4 := oil_filter_dirty;
StatusWord.5 := oil_cold;
StatusWord.6 := oil_hot;
StatusWord.7 := brake_open;
StatusWord.8 := GVL_Main.brake_clearing;
StatusWord.9 := pump_running;
StatusWord.10 := suction_running;

IF StatusWord<>LastStatus THEN // publish new payload every second
	LastStatus := StatusWord;
	MAIN.MQTTClient.Publish('hydraulics', 'base', 'OilLow',			BOOL_TO_STRING(oil_low));
	MAIN.MQTTClient.Publish('hydraulics', 'base', 'OilHigh',		BOOL_TO_STRING(oil_high));
	MAIN.MQTTClient.Publish('hydraulics', 'base', 'OilReserve',		BOOL_TO_STRING(oil_warning));
	MAIN.MQTTClient.Publish('hydraulics', 'base', 'OilPressureOK', 	BOOL_TO_STRING(oil_pressure_OK));
	MAIN.MQTTClient.Publish('hydraulics', 'base', 'OilFilterDirty',	BOOL_TO_STRING(oil_filter_dirty));
	MAIN.MQTTClient.Publish('hydraulics', 'base', 'OilCold',		BOOL_TO_STRING(oil_cold));
	MAIN.MQTTClient.Publish('hydraulics', 'base', 'OilHot',			BOOL_TO_STRING(oil_Hot));
	MAIN.MQTTClient.Publish('hydraulics', 'base', 'BrakeOpen',		BOOL_TO_STRING(brake_open));
	MAIN.MQTTClient.Publish('hydraulics', 'base', 'BrakeClearing',	BOOL_TO_STRING(GVL_Main.brake_clearing));
	MAIN.MQTTClient.Publish('hydraulics', 'base', 'PumpRunning',	BOOL_TO_STRING(pump_running));
	MAIN.MQTTClient.Publish('hydraulics', 'base', 'SuctionRunning',	BOOL_TO_STRING(suction_running));
END_IF


				  				  
HydraulicsLog(Trigger := pressure_failure,
				Level := ADSLOG_MSGTYPE_ERROR,
				FormatString := 'oil pressure: %s',
				OnMessage := 'FAILURE',
				OffMessage := 'OK',
				OffLevel := ADSLOG_MSGTYPE_HINT);

PumpLog(Trigger := pump_running,
				Level := ADSLOG_MSGTYPE_HINT,
				FormatString := 'Main hydraulics pump: %s',
				OnMessage := 'START',
				OffMessage := 'STOP',
				OffLevel := ADSLOG_MSGTYPE_HINT);
	
ReserveLog(Trigger := oil_warning,
			Level := ADSLOG_MSGTYPE_WARN,
			FormatString := 'oil reserve: %s',
			OnMessage := 'LOW',
			OffMessage := 'OK',
			OffLevel := ADSLOG_MSGTYPE_HINT);

oil_low_log(Trigger := oil_low,
				Level := ADSLOG_MSGTYPE_ERROR,
				FormatString := 'oil level: %s',
				OnMessage := 'LOW',
				OffMessage := 'OK',
				OffLevel := ADSLOG_MSGTYPE_HINT);

FilterLog(Trigger := oil_filter_dirty,
				Level := ADSLOG_MSGTYPE_WARN,
				FormatString := 'Hydraulics Filter is %s',
				OnMessage := 'dirty.');

OverTemperatureLog(Trigger := oil_hot,
				Level := ADSLOG_MSGTYPE_WARN,
				FormatString := 'Hydraulics Temperature is %s',
				OnMessage := 'high.');
UnderTemperatureLog(Trigger := oil_cold,
				Level := ADSLOG_MSGTYPE_WARN,
				FormatString := 'Hydraulics Temperature is %s',
				OnMessage := 'low.');

SuctionLog(Trigger := suction_failure OR hydraulics_failure,
				Level := ADSLOG_MSGTYPE_ERROR,
				FormatString := 'suction pump: %s',
				OnMessage := 'FAILURE',
				OffMessage := 'OK',
				OffLevel := ADSLOG_MSGTYPE_HINT);

BreakClearingWarning(Trigger := NOT Main.brake_clearing AND iopen_brake,
				Level := ADSLOG_MSGTYPE_WARN,
				FormatString := '%s',
				OnMessage := 'Cannot open brake without brake clearing.');

BreakHydraulicsWarning(Trigger := NOT manual_start AND iopen_brake,
				Level := ADSLOG_MSGTYPE_WARN,
				FormatString := '%s',
				OnMessage := 'Cannot open brake without running hydraulics.');
]]></ST>
    </Implementation>
    <Method Name="close_brake" Id="{7fefbb0e-6635-46fb-8dba-b1b28670200d}">
      <Declaration><![CDATA[METHOD close_brake : BOOL
VAR_INPUT
END_VAR
VAR
	hydraulics_off_timer:	TON  := (PT := T#10S);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// close the brake
iclose_brake := TRUE;
// if the brake is closed, turn off the hydraulics after n seconds
hydraulics_off_timer(IN := brake_closed);
IF hydraulics_off_timer.Q THEN
	istop := TRUE;
END_IF

RETURN(brake_closed);]]></ST>
      </Implementation>
    </Method>
    <Method Name="open_brake" Id="{927530ea-3ed2-4333-ae45-3cb22ac63b25}">
      <Declaration><![CDATA[METHOD open_brake : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// start the pump
istart := TRUE;
// open the brake
iopen_brake := TRUE;
RETURN(brake_open);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="HydraulicsControl">
      <LineId Id="1912" Count="21" />
      <LineId Id="2192" Count="0" />
      <LineId Id="1935" Count="10" />
      <LineId Id="2191" Count="0" />
      <LineId Id="1946" Count="157" />
      <LineId Id="708" Count="0" />
    </LineIds>
    <LineIds Name="HydraulicsControl.close_brake">
      <LineId Id="11" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="13" Count="2" />
      <LineId Id="10" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="HydraulicsControl.open_brake">
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="5" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>