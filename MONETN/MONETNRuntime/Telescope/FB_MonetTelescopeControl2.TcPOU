<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="FB_MonetTelescopeControl2" Id="{392c90d3-a441-4c8d-a752-42b25b49f5cd}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MonetTelescopeControl2 EXTENDS FB_AltAzTelescopeControl
VAR_INPUT
	fbFocus				: I_Focus;
	fbCovers			: I_MirrorCovers;
	fbBrake				: I_Brake;	
	fbHydraulics   		: I_Hydraulics;
	fbElevation			: REFERENCE TO FB_ElevationControl;
	fbAzimuth			: REFERENCE TO FB_AzimuthControl;
	fbDerotator			: REFERENCE TO FB_DerotatorControl;

	bBrakeClearing		: BOOL	:= TRUE;
END_VAR
VAR_OUTPUT
	fDerotatorCalc		: LREAL;	// derotator calc
	fDerotatorSign		: LREAL := 1.0;	// derotator
	
	fDerotatorVelocity	: LREAL;	// rotational velocity of the derotator
	fElevationVelocity	: LREAL;	// rotational velocity of the elevation
	fAzimuthVelocity	: LREAL;	// rotational velocity of the elevation
	
	fDerotatorCurrent	: LREAL;	// current position in derotator (calculated) (without pointing and offset correction)
	fDerotatorOffset	: LREAL := 0.0;		// offset for the de-rotator
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// get the system time
fbTime();
fJd := DateTime2JD(fbTime.time_RTCEX2);
fLst := CT2LST(telescopeConfig.longitude, fJd);

// set reset state either by hardware (key pressed) or by software (set by e.g. tcs)
rtrigReset(CLK := bReset);

IF bReset THEN
	bHorizonError := FALSE; // if reset, the bHorizonError can be switched off
	
	// reset the stages of all statemachine methods
	bInterrupted := TRUE; 
	_HomeTelescope();
	_GotoTelescope();
	_SlewTelescope();
	_ParkTelescope();
	bInterrupted := FALSE;
END_IF

// get error ID, reset if bReset command is set
IF fbAzimuth.Error THEN
	nErrorID := fbAzimuth.nErrorID;
	IF bReset THEN
		fbAzimuth.Reset();
	END_IF
ELSIF fbElevation.bError THEN
	nErrorID := fbElevation.nErrorID;
	IF bReset THEN
		fbElevation.Reset();
	END_IF
ELSIF fbDerotator.bError THEN
	nErrorID := fbDerotator.nErrorID;
	IF bReset THEN
		fbDerotator.Reset();
	END_IF	
ELSIF fbFocus <> 0 AND_THEN fbFocus.Error THEN
	nErrorID := fbFocus.ErrorID;
	IF bReset THEN
		fbFocus.Reset();
	END_IF
END_IF

// fSlewTime
fSlewTime :=  MAX(MAX(fbElevation.fSlewTime, fbAzimuth.fSlewTime), fbDerotator.fSlewTime);

bError := fbElevation.Error OR 
		 fbAzimuth.bError OR
		 (fbFocus <> 0 AND_THEN fbFocus.Error) OR
		 fbDerotator.bError;
			
IF bError THEN
	bGoHome := 	FALSE;
	bTrack := 	FALSE;
	bGoto := 	FALSE;
	bSlew := 	FALSE;
	fbElevation.Enable := FALSE;
	fbAzimuth.Enable := FALSE;
ELSE
	nErrorID := 0;
END_IF

IF fbElevation.bError THEN
	fbElevation.Enable := FALSE;
	fbAzimuth.Enable := FALSE;
	fbBrake.CloseBrake();
END_IF

eq2hor(
	ra := fRightAscension,
	dec := fDeclination,
	lon := telescopeConfig.longitude,
	lat := telescopeConfig.latitude,
	JD := fJd + fTimeOffset,
	alt => fElevationCalc,
	az => fAzimuthCalc,
	ha => fHourAngleCalc);

// apply pointing model
//fElevationCalc := fElevationCalc + PointingModelElevation(fAzimuthCalc, fElevationCalc, EOFF + fElevationOffset, AN_E, AE_E, TF);
//fAzimuthCalc := fAzimuthCalc + PointingModelAzimuth(fAzimuthCalc, fElevationCalc, AOFF + fAzimuthOffset, BNP, AN_A, AE_A, NPAE);
// calculate derotator position 
fDerotatorCalc := F_DerotatorPosition2(fAzimuthCalc, fElevationCalc, fDeclination, telescopeConfig.latitude, fDerotatorSign)  + fDerotatorOffset;
// calculate velocities
fDerotatorVelocity := F_Derotatorvelocity(fElevationCalc, fAzimuthCalc, telescopeConfig.latitude);
fElevationVelocity := F_Elevationvelocity(fAzimuthCalc, telescopeConfig.latitude);
fAzimuthVelocity := F_Azimuthvelocity(fElevationCalc, fAzimuthCalc, telescopeConfig.latitude);

// calculate velocities
fDerotatorVelocity := F_Derotatorvelocity(fElevationCalc, fAzimuthCalc, telescopeConfig.latitude);
fElevationVelocity := F_Elevationvelocity(fAzimuthCalc, telescopeConfig.latitude);
fAzimuthVelocity := F_Azimuthvelocity(fElevationCalc, fAzimuthCalc, telescopeConfig.latitude);

IF (fAzimuthCalc > 310.0 AND fAzimuthVelocity > 0.0) OR (fAzimuthCalc > 440.0) THEN
	fAzimuthCalc := fAzimuthCalc - 360.0;
ELSIF (fAzimuthCalc < 80.0 AND fAzimuthVelocity < 0.0) OR (fAzimuthCalc < -50.0) THEN
	fAzimuthCalc := fAzimuthCalc + 360.0;
END_IF

IF (fDerotatorCalc > 290.0 AND fDerotatorVelocity > 0.0) OR (fDerotatorCalc > 380.0) THEN
	fDerotatorCalc := fDerotatorCalc - 360.0;
ELSIF (fDerotatorCalc < 20.0 AND fDerotatorVelocity < 0.0) OR (fDerotatorCalc < -70.0) THEN
	fDerotatorCalc := fDerotatorCalc + 360.0;
END_IF

// get current coordinates	
fAzimuthCurrent := fbAzimuth.fActualPosition;
fElevationCurrent := fbElevation.fActualPosition;
fDerotatorCurrent := fbDerotator.fActualPosition;

// apply pointing model
fElevationCurrentSky := fElevationCurrent - PointingModelElevation(fAzimuthCurrent, fElevationCurrent, EOFF, AN_E, AE_E, TF);
fAzimuthCurrentSky := fAzimuthCurrent - PointingModelAzimuth(fAzimuthCurrent, fElevationCurrent, AOFF, BNP, AN_A, AE_A, NPAE);

// add offsets
fElevationCurrent := fElevationCurrentSky - fElevationOffset;
fAzimuthCurrent := fAzimuthCurrentSky - fAzimuthOffset;

// calculate equatorial coordinates
hor2eq(alt := fElevationCurrent, 
		az := fAzimuthCurrent,
		jd := fJd,
		lat := telescopeConfig.latitude,
		lon := telescopeConfig.longitude,
		altitude := telescopeConfig.altitude,
		ra => fRightAscensionCalc,
		dec => fDeclinationCalc);		
hor2eq(alt := fElevationCurrentSky, 
		az := fAzimuthCurrentSky,
		jd := fJd,
		lat := telescopeConfig.latitude,
		lon := telescopeConfig.longitude,
		altitude := telescopeConfig.altitude,
		ra => fRightAscensionCalc,
		dec => fDeclinationCalc);
	
// If the Telescope dips under the fHorizon (e.g. while tracking, stop and gohome)
IF fElevationCurrent < (fHorizon+0.2) THEN
	IF NOT bStopped AND NOT bGoHome THEN
		bStop := TRUE;
	ELSE
		bGoHome := TRUE;
	END_IF
END_IF
		
tpPowerOnWarning(IN := bPower OR (NOT fbElevation.bEnable AND fbBrake.BrakeOpen), PT := T#250MS);

tonPowerTimeout(IN := TCS_command = E_TCSCommand.no_command AND NOT bIsParked, PT := T#12H);
tonCommandTimeout();
IF tonPowerTimeout.Q AND NOT bIsParked THEN
	bPark := TRUE;
END_IF
		
// set TCS_command according to state variables ordered by precedence
IF bPower THEN
	TCS_command := E_TCSCommand.poweron;
	
ELSIF bStop THEN
	bTrack := FALSE;
	
	// If the stop is during a movement, reset the stage of the movement first
	IF bPark THEN
		bPark := FALSE;
		_ParkTelescope();
	ELSIF bGoto THEN
		bGoto := FALSE;
		_GotoTelescope();
	ELSIF bSlew THEN
		bSlew := FALSE;
		_SlewTelescope();
	ELSIF bGoHome THEN
		bGoHome := FALSE;
		_HomeTelescope();
	END_IF
	TCS_command := E_TCSCommand.stop;
	
ELSIF bPark THEN
	bTrack := FALSE;
	// If lower presedence commands are ongoing, let them know they are interupted
	IF bGoto OR bSlew OR bGoHome THEN
		bGoHome := FALSE;
		bGoto := FALSE;
		bSlew := FALSE;
		bInterrupted := TRUE;
		_HomeTelescope();
		_GotoTelescope();
		_SlewTelescope();
		
	ELSE
		IF bReady AND NOT bBusy THEN
			bInterrupted := FALSE;
			TCS_command := E_TCSCommand.park;
		END_IF
	END_IF
	
ELSIF bGoHome THEN
	bTrack := FALSE;
	// If lower presedence commands are ongoing, let them know they are interupted
	IF bGoto OR bSlew THEN
		bGoto := FALSE;
		bSlew := FALSE;
		bInterrupted := TRUE;
		_GotoTelescope();
		_SlewTelescope();
		
	ELSE
		IF bReady AND NOT bBusy AND bStopped THEN
			bInterrupted := FALSE;
			TCS_command := E_TCSCommand.gohome;
		END_IF
	END_IF
	
	
ELSIF bGoto THEN
	bTrack := FALSE;
	// If lower presedence commands are ongoing, let them know they are interupted
	IF bSlew THEN
		bSlew := FALSE;
		bInterrupted := TRUE;
		_SlewTelescope();
	ELSE
		IF bReady AND NOT bBusy THEN
			bInterrupted := FALSE;
			TCS_command := E_TCSCommand.goto;
		END_IF
	END_IF
		
ELSIF bSlew THEN
	bTrack := FALSE;
	IF bReady AND NOT bBusy THEN
		TCS_command := E_TCSCommand.slew;
	END_IF
	
ELSIF bTrack THEN
	IF bReady AND NOT bBusy THEN
		TCS_command := E_TCSCommand.track;
	END_IF
	
ELSE
	TCS_command := E_TCSCommand.no_command;
	fbElevation.bMoveAxis := FALSE;
	fbAzimuth.bMoveAxis := FALSE;
	fbElevation.bTracking := FALSE;
	fbAzimuth.bTracking := FALSE;
END_IF

IF TCS_command = E_TCSCommand.poweron THEN
	_PowerOn();
	tonCommandTimeout(IN := TCS_command = E_TCSCommand.poweron, PT := T#12H);
	TCSCTOEvent.OnMessage := 'POWER';
ELSIF TCS_command = E_TCSCommand.stop THEN
	_StopTelescope();
	tonCommandTimeout(IN := TCS_command = E_TCSCommand.stop, PT := T#2S);
	TCSCTOEvent.OnMessage := 'STOP';
ELSIF TCS_command = E_TCSCommand.park THEN
	_ParkTelescope();
	tonCommandTimeout(IN := TCS_command = E_TCSCommand.park, PT := T#2M);
	TCSCTOEvent.OnMessage := 'PARK';
ELSIF TCS_command = E_TCSCommand.gohome THEN
	_HomeTelescope();
	tonCommandTimeout(IN := TCS_command = E_TCSCommand.gohome, PT := T#2M);
	TCSCTOEvent.OnMessage := 'GOHOME';
ELSIF TCS_command = E_TCSCommand.goto THEN
	_GotoTelescope();
	tonCommandTimeout(IN := TCS_command = E_TCSCommand.goto, PT := T#2M);
	TCSCTOEvent.OnMessage := 'GOTO';
ELSIF TCS_command = E_TCSCommand.slew THEN
	_SlewTelescope();
	tonCommandTimeout(IN := TCS_command = E_TCSCommand.slew, PT := T#2M);
	TCSCTOEvent.OnMessage := 'SLEW';
ELSIF TCS_command = E_TCSCommand.track THEN
	_TrackTelescope();
	tonCommandTimeout(IN := TCS_command = E_TCSCommand.track, PT := T#12H);
	TCSCTOEvent.OnMessage := 'TRACK';
ELSE
	// disable command timeout
	tonCommandTimeout(IN := FALSE);
	TCSCTOEvent.OnMessage := 'NOCOMMAND';
END_IF
 
bSlewing := NOT bTracking AND (fbElevation.fbAxis.InMotion OR fbElevation.fbAxis.InRamp OR
			fbAzimuth.fbAxis.InMotion OR fbAzimuth.fbAxis.InRamp OR
			fbDerotator.fbAxis.InMotion OR fbDerotator.fbAxis.InRamp);

// signal must be stable for 5500MS
tonTrackingDelay(in := fbElevation.fbAxis.isTracking AND 
			fbAzimuth.fbAxis.isTracking AND
			fbDerotator.fbAxis.isTracking,PT :=T#5500MS, Q => bTracking);
			
bStopped :=  (NOT fbElevation.bEnable OR fbElevation.fbAxis.StandStill) AND 
			(NOT fbAzimuth.bEnable OR fbAzimuth.fbAxis.StandStill) AND
			(NOT fbDerotator.bEnable OR fbDerotator.fbAxis.StandStill);
			
bHomed := fbElevation.bCalibrated AND
			fbAzimuth.bCalibrated AND
			fbDerotator.bCalibrated;
IF fbFocus <> 0 THEN
	bHomed := bHomed AND fbFocus.Calibrated;
END_IF
			
bReady := bHomed AND 
	fbCovers.Opened AND 
	fbElevation.bEnable AND
	fbAzimuth.bEnable AND
	fbDerotator.bEnable AND fbBrake.BrakeOpen AND 
    NOT bError;

bBusy := fbElevation.fbAxis.Busy OR
		fbAzimuth.fbAxis.Busy OR
		fbDerotator.fbAxis.Busy;
IF fbFocus <> 0 THEN
	bBusy := bBusy AND fbFocus.Busy;
END_IF		

(* STATUS STATES*)
//fReadyState (see also _PowerOn and _ParkTelescope calls above)
IF bReady THEN
	fReadyState := 1.0;
ELSIF bError THEN
	fReadyState := -1.0;
ELSIF bIsParked THEN
	fReadyState := 0.0;
END_IF

//MotionState
IF bStopped THEN
	nMotionState := 0;
ELSIF bSlewing OR bBusy THEN
	nMotionState := 1;
ELSIF bTracking THEN
	nMotionState := 8;
END_IF

// unset the STOP command if telescope is already stopped
IF bStopped THEN
	bStop := FALSE;
END_IF
	
IF NOT bError THEN
	bReset := FALSE;
END_IF

IF bEstopTriggered THEN
	fbElevation.Enable := FALSE;
	fbAzimuth.Enable := FALSE;
	fbDerotator.Enable := FALSE;
END_IF

// send telemetry
IF bSlewing OR bTrack OR bTracking THEN
	tonMQTTTimer.PT := T#1000MS; // during movement every second
ELSE
	tonMQTTTimer.PT := T#5000MS; // otherwise every five seconds
END_IF
tonMQTTTimer(IN:=TRUE);
IF tonMQTTTimer.Q THEN
	tonMQTTTimer(IN:=FALSE);
	_SendTelemetry();
END_IF


(* Event function blocks start here. *)
TCSpowerEvent(	Trigger := bPowerFailure, 
				Level := ADSLOG_MSGTYPE_ERROR,
				FormatString := 'power %s',
				//OnMessage := 'Failure',
				OffMessage := 'OK', 
				Comm := fbComm);

TCSgohomeEvent(	Trigger := bGoHome, 
				Level := ADSLOG_MSGTYPE_HINT,
				FormatString := 'GOHOME %s',
				OnMessage := 'commencing',
				OffMEssage := 'completed', 
				Comm := fbComm);
TCSparkEvent(	Trigger := bPark, 
				Level := ADSLOG_MSGTYPE_HINT,
				FormatString := 'PARK %s',
				OnMessage := 'commencing',
				OffMEssage := 'completed', 
				Comm := fbComm);
TCSgotoEvent(	Trigger := bGoto, 
				Level := ADSLOG_MSGTYPE_HINT,
				FormatString := 'GOTO %s',
				OnMessage := 'commencing',
				OffMEssage := 'completed', 
				Comm := fbComm);
TCStrackEvent(	Trigger := bTrack, 
				Level := ADSLOG_MSGTYPE_HINT,
				FormatString := 'TRACK %s',
				OnMessage := 'commencing',
				OffMEssage := 'completed', 
				Comm := fbComm);
TCSstopEvent(	Trigger := bStop, 
				Level := ADSLOG_MSGTYPE_WARN,
				FormatString := 'STOP %s',
				OnMessage := 'commencing',
				OffMEssage := 'completed',
				OffLevel := ADSLOG_MSGTYPE_HINT, 
				Comm := fbComm);
TCStargetHorizonEvent(	Trigger := bPower AND fElevationCalc<fHorizon, 
				Level := ADSLOG_MSGTYPE_WARN,
				FormatString := '%s',
				OnMessage := 'Target below safe horizon',
				OffMEssage := '', 
				Comm := fbComm);
TCSreadyEvent(	Trigger := bPower AND bReady, 
				Level := ADSLOG_MSGTYPE_HINT,
				FormatString := '%s',
				OnMessage := 'STELLA1 startup finished', 
				Comm := fbComm);
TCSCTOEvent(	Trigger := tonCommandTimeout.Q,
				Level := ADSLOG_MSGTYPE_WARN,
				FormatString := 'A timeout occured during %s command!',
				OnMessage := 'NOCOMMAND', 
				Comm := fbComm);]]></ST>
    </Implementation>
    <Folder Name="internal methods" Id="{d1e7fbc6-9662-4c16-bf25-8044ef92da3b}" />
    <Method Name="_GotoTelescope" Id="{8976ce61-8856-40e1-8cfb-7b9454a4edbf}" FolderPath="internal methods\">
      <Declaration><![CDATA[METHOD PRIVATE _GotoTelescope : USINT
VAR_INPUT
END_VAR
VAR
	GoToEvent		: FB_Eventlog;
	commandTimeout	: TON;
END_VAR
VAR_STAT
	Stage			: USINT := 0;
	LastStage		: USINT := 101;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_GotoTelescope := Stage;
commandTimeout(IN := Stage < 100, PT := T#600S);
IF commandTimeout.Q THEN
	bError := TRUE;
	nErrorID := 16#10;
	bGoto := FALSE;
	Stage := 0;
	RETURN;
END_IF

IF fElevationCalc<2.0 THEN
	bError := TRUE;
	nErrorID := 16#15;
	bGoto := FALSE;
	Stage := 0;
	RETURN;
END_IF

IF bReset OR bError OR bInterrupted THEN
	Stage := 0;
	RETURN;
END_IF

CASE Stage OF
	0:	
		IF bReady AND NOT bBusy THEN
			Stage := 25;
		END_IF
	25:	
		fbElevation.Position := fElevationCalc;
		fbAzimuth.Position := fAzimuthCalc;
		fbDerotator.Position := fDerotatorCalc;
		fbDerotator.Velocity := 10.0;
		fbElevation.Velocity := 10.0;
		fbAzimuth.Velocity := 10.0;
		
		fbElevation.MoveAxis := TRUE;
		fbAzimuth.MoveAxis := TRUE;
		fbDerotator.MoveAxis := TRUE;
		IF fbElevation.Busy AND
			fbAzimuth.Busy AND
			fbDerotator.Busy THEN
				Stage := 50;
		END_IF
	50:
		IF NOT fbElevation.Busy AND fbElevation.MoveDone THEN
			fbElevation.MoveAxis := FALSE;
		END_IF
		IF NOT fbAzimuth.Busy AND fbAzimuth.MoveDone THEN
			fbAzimuth.MoveAxis := FALSE;
		END_IF
		IF NOT fbDerotator.Busy AND fbDerotator.MoveDone THEN
			fbDerotator.MoveAxis := FALSE;
		END_IF
		IF NOT fbElevation.MoveAxis AND 
           NOT fbAzimuth.MoveAxis AND 
		   NOT fbDerotator.MoveAxis THEN
		   Stage := 75;
		END_IF
	75:
		IF NOT bSlewing AND bStopped THEN // all axis standstill
			Stage := 100;
		END_IF
	100:
		fbElevation.MoveAxis := FALSE;
		fbAzimuth.MoveAxis := FALSE;
		fbDerotator.MoveAxis := FALSE;
		fAzimuth := fAzimuthCalc;
		fElevation := fElevationCalc;
		bGoto := FALSE;
		// enable automatic tracking
		bTrack := bAutoTrack;
		Stage := 0;
END_CASE
GoToEvent(Trigger := Stage > LastStage, FormatString := 'GoTo progress: %s', OnMessage := USINT_TO_STRING(Stage), comm := fbComm);
LastStage := Stage;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_HomeTelescope" Id="{4753aff7-faba-4306-9d47-8cb63c25adcc}" FolderPath="internal methods\">
      <Declaration><![CDATA[METHOD PRIVATE _HomeTelescope : BOOL
VAR_INPUT
END_VAR
VAR
	HomeEvent		: FB_Eventlog;
	commandTimeout	: TON;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[commandTimeout(IN := NOT _HomeTelescope, PT := T#600S);
IF commandTimeout.Q THEN
	bError := TRUE;
	nErrorID := 16#30;
	_HomeTelescope :=TRUE;
END_IF

IF bReady AND bStopped AND NOT bBusy AND NOT bTracking THEN
	fbElevation.Velocity := 10.0;
	fbElevation.Position := telescopeConfig.elevationHome;
	fbElevation.MoveAxis := TRUE;
	fbAzimuth.Velocity := 10.0;
	fbAzimuth.Position := telescopeConfig.azimuthHome;
	fbAzimuth.MoveAxis := TRUE;
	fbDerotator.Velocity := 10.0;
	fbDerotator.Position := telescopeConfig.derotatorHome;
	fbDerotator.MoveAxis := TRUE;	
END_IF

IF fbElevation.MoveDone AND 
	fbAzimuth.MoveDone AND 
	fbDerotator.MoveDone THEN
	bGoHome := FALSE;
	fElevation := fElevationCurrent;
	fAzimuth := fAzimuthCurrent;
	_HomeTelescope := TRUE;
ELSE
	_HomeTelescope := FALSE;
END_IF

HomeEvent(Trigger := _HomeTelescope, 
			Level := ADSLOG_MSGTYPE_HINT,
			FormatString := '%s',
			OnMessage := 'Telescope is homed.', comm := fbComm);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_ParkTelescope" Id="{999576b1-8aca-41eb-91ab-673a6fc7f4ba}" FolderPath="internal methods\">
      <Declaration><![CDATA[METHOD PRIVATE _ParkTelescope : USINT
VAR_INPUT
END_VAR
VAR
	ParkEvent	: FB_Eventlog;
END_VAR
VAR_STAT
	Stage		: USINT := 0;
	LastStage	: USINT := 101;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_ParkTelescope := Stage;
IF bReset OR bError THEN
	Stage := 0;
END_IF
IF bIsParked THEN
	Stage := 100;
END_IF
CASE Stage OF
	0: 
		bGoHome := 	FALSE;
		bTrack := 	FALSE;
		bGoto := 	FALSE;
		bSlew := 	FALSE;
		IF fbFocus <> 0 THEN
			fbFocus.Position := telescopeConfig.focusPark;
		END_IF
		IF bError THEN // emergency park
			fbBrake.CloseBrake();
			fbElevation.Enable := FALSE;
			fbAzimuth.Enable := FALSE;
			fbDerotator.Enable := FALSE;	
			fbCovers.Close();	
			Stage := 80;
		END_IF
		Stage := 20;
	20:
		fbElevation.Position := telescopeConfig.elevationPark;
		fbElevation.Velocity := 10.0;
		fbElevation.MoveAxis := TRUE;
		fbAzimuth.Position := telescopeConfig.azimuthPark;
		fbAzimuth.Velocity := 10;
		fbAzimuth.MoveAxis := TRUE;
		fbDerotator.Position := telescopeConfig.derotatorPark;
		fbDerotator.Velocity := 10.0;
		fbDerotator.MoveAxis := TRUE;
		IF fbElevation.Busy AND
			fbAzimuth.Busy AND
			fbDerotator.Busy THEN
				Stage := 40;
		END_IF
	40:
		IF fbElevation.MoveDone THEN
			fbElevation.MoveAxis := FALSE;
		END_IF
		IF fbAzimuth.MoveDone THEN
			fbAzimuth.MoveAxis := FALSE;
		END_IF
		IF fbDerotator.MoveDone THEN
			fbDerotator.MoveAxis := FALSE;
		END_IF
		IF NOT bSlewing THEN // all axis standstill
			Stage := 60;
		END_IF
	60:
		IF NOT fbElevation.Enable AND NOT fbAzimuth.Enable AND NOT fbDerotator.Enable THEN
			stage := 80;
		END_IF

		IF bStopped THEN
			fbElevation.Enable := FALSE;
			fbAzimuth.Enable := FALSE;
			fbDerotator.Enable := FALSE;
		END_IF
		
		fbElevation.bMoveAxis := FALSE;
		fbAzimuth.bMoveAxis := FALSE;
		fbDerotator.bMoveAxis := FALSE;
	80:
		IF fbElevation.Enable OR fbAzimuth.Enable OR fbDerotator.Enable THEN
			stage := 60;
		END_IF
		IF NOT fbBrake.BrakeOpen THEN
			fbCovers.Close();
			fbHydraulics.Enable := FALSE;
		END_IF
		IF fbCovers.Closed THEN
			Stage := 100;
		END_IF
	100:
			bIsParked := TRUE;
			bPark := FALSE;
			_ParkTelescope := 100;
			Stage := 0;	
END_CASE
ParkEvent(Trigger := Stage > LastStage, FormatString := 'Parking progress: %s', OnMessage := USINT_TO_STRING(Stage), comm := fbComm);
LastStage := Stage;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_PowerOn" Id="{4c40649f-56d9-4130-9f80-925439540d98}" FolderPath="internal methods\">
      <Declaration><![CDATA[METHOD PRIVATE _PowerOn : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bBrakeClearing THEN
	bPowerFailure := TRUE;
	TCSpowerEvent.OnMessage := 'failure: brake clearing not set';
	bPower := FALSE;
ELSIF bError THEN
	bPowerFailure := TRUE;
	TCSpowerEvent.OnMessage := 'Generic error during power on occured.';
	bPower := FALSE;
ELSE
	bPowerFailure := FALSE;		
END_IF
// COVER MUST BE OPENED FOR A SUCCESSFUL WAKE & SHAKE COMMAND!
fbCovers.Open();

// enable elevation, enable azimuth
IF bMainReady AND fbCovers.Opened THEN
	fbElevation.Enable := TRUE;
	fbAzimuth.Enable := TRUE;
	fbDerotator.Enable := TRUE;
END_IF

IF fbElevation.Ready AND NOT fbElevation.Calibrated THEN
	fbElevation.HomeAxis := TRUE;
END_IF

IF fbAzimuth.Ready AND NOT fbAzimuth.Calibrated THEN
	fbAzimuth.HomeAxis := TRUE;
END_IF

// enable derotator
IF fbElevation.Ready THEN
	fbDerotator.HomeAxis := fbDerotator.Ready AND NOT fbDerotator.Calibrated;
END_IF

// start calibration of focus after elevation has been calibrated
// this avoids imbalance by the M2 mirror on the elvation during its calibration
IF fbElevation.Calibrated AND (fbFocus <> 0 AND_THEN NOT fbFocus.Calibrated) THEN
	fbFocus.Enable := TRUE;
	fbFocus.HomeAxis := TRUE;
END_IF

IF fbCovers.Opened AND 
	fbElevation.Calibrated AND
	fbAzimuth.Calibrated AND
	fbDerotator.Calibrated THEN
	//FocusControl.Calibrated THEN
	bPower := FALSE;
	_PowerOn := TRUE;
	bIsParked := FALSE;
	// slew the telescope to the home position
	bGoHome := TRUE;
ELSE
	_PowerOn := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_SendTelemetry" Id="{5e3ab35e-5dd6-4108-99df-8d99cebae004}" FolderPath="internal methods\">
      <Declaration><![CDATA[METHOD _SendTelemetry : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^._PublishTelemetry();

//INSTRUMENTAL
// > ALT
// POWER_STATE
IF fbElevation.Enable THEN
	fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.ALT.POWER_STATE', '1.0');
ELSE
	fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.ALT.POWER_STATE', '0.0');
END_IF
//REFERENCED
IF fbElevation.Calibrated THEN
	fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.ALT.REFERENCED', '1.0');
ELSE
	fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.ALT.REFERENCED', '0.0');
END_IF
//ERROR_STATE
IF fbElevation.Error THEN
	fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.ALT.ERROR_STATE', UDINT_TO_STRING(fbElevation.ErrorID));
ELSE
	fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.ALT.ERROR_STATE', '0');
END_IF
//MOTION_STATE
IF fbElevation.Busy THEN
	IF fbElevation.isTracking THEN
		fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.ALT.MOTION_STATE', '8');
	ELSE
		fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.ALT.MOTION_STATE', '1');
	END_IF
ELSE
	fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.ALT.MOTION_STATE', '0');
END_IF
//fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.DEC.REALPOS', LREAL_TO_STRING(fElevationCurrent-fDeclinationOffset));
fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.DEC.CURRPOS', LREAL_TO_STRING(fElevationCurrent));
fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.DEC.TARGETPOS', LREAL_TO_STRING(fbElevation.Position));
fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.DEC.CURRSPEED', LREAL_TO_STRING(fbElevation.Velocity));
fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.DEC.TARGETDISTANCE', LREAL_TO_STRING(ABS(fElevationCurrent-fbElevation.Position)));
//fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.DEC.OFFSET', LREAL_TO_STRING(fDeclinationOffset));

// > AZ
// POWER_STATE
IF fbAzimuth.Enable THEN
	fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.AZ.POWER_STATE', '1.0');
ELSE
	fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.AZ.POWER_STATE', '0.0');
END_IF
//REFERENCED
IF fbAzimuth.Calibrated THEN
	fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.AZ.REFERENCED', '1.0');
ELSE
	fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.AZ.REFERENCED', '0.0');
END_IF
//ERROR_STATE
IF fbAzimuth.Error THEN
	fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.AZ.ERROR_STATE', UDINT_TO_STRING(fbAzimuth.ErrorID));
ELSE
	fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.AZ.ERROR_STATE', '0');
END_IF
//MOTION_STATE
IF fbAzimuth.Busy THEN
	IF fbAzimuth.isTracking THEN
		fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.AZ.MOTION_STATE', '8');
	ELSE
		fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.AZ.MOTION_STATE', '1');
	END_IF
ELSE
	fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.AZ.MOTION_STATE', '0');
END_IF

fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.AZ.CURRPOS', LREAL_TO_STRING(fAzimuthCurrent));
//fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.AZ.REALPOS', LREAL_TO_STRING(fAzimuthCurrent-fHourAngleOffset/COS(fDeclination*d2r)));
fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.AZ.TARGETPOS', LREAL_TO_STRING(fbAzimuth.Position));
fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.AZ.CURRSPEED', LREAL_TO_STRING(fbAzimuth.Velocity));
fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.AZ.TARGETDISTANCE', LREAL_TO_STRING(ABS(fAzimuthCurrent-fbAzimuth.Position)));
//fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.AZ.OFFSET', LREAL_TO_STRING(fHourAngleOffset));

// > FOCUS
// POWER_STATE
IF fbFocus.Enable THEN
	fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.FOCUS.POWER_STATE', '1.0');
ELSE
	fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.FOCUS.POWER_STATE', '0.0');
END_IF
//REFERENCED
IF fbFocus.Calibrated THEN
	fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.FOCUS.REFERENCED', '1.0');
ELSE
	fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.FOCUS.REFERENCED', '0.0');
END_IF
//ERROR_STATE
IF fbFocus.Error THEN
	fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.FOCUS.ERROR_STATE', UDINT_TO_STRING(fbAzimuth.ErrorID));
ELSE
	fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.FOCUS.ERROR_STATE', '0');
END_IF
//MOTION_STATE
IF fbFocus.Busy THEN
	fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.FOCUS.MOTION_STATE', '1');
ELSE
	fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.FOCUS.MOTION_STATE', '0');
END_IF
//fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.FOCUS.CURRPOS', LREAL_TO_STRING(fbFocus.ActualPosition));
//fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.FOCUS.REALPOS', LREAL_TO_STRING(fbFocus.ActualPosition));
fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.FOCUS.TARGETPOS', LREAL_TO_STRING(fbFocus.Position));
//fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.FOCUS.TARGETDISTANCE', LREAL_TO_STRING(ABS(fbFocus.ActualPosition-fbFocus.Position)));
fbComm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.FOCUS.CURRSPEED', LREAL_TO_STRING(fbFocus.Velocity));


(*HORIZONTAL*)
//fbComm.Publish('telescope', 'dome', 'POSITION.HORIZONTAL.ALT', LREAL_TO_STRING(fElevationCurrentSky));
//fbComm.Publish('telescope', 'dome', 'POSITION.HORIZONTAL.AZ', LREAL_TO_STRING(fAzimuthCurrentSky));
//fbComm.Publish('telescope', 'dome', 'POSITION.HORIZONTAL.DOME', LREAL_TO_STRING(fbDome.Position));

(*EQUITORIAL*)
//fbComm.Publish('telescope', 'dome', 'POSITION.EQUATORIAL.RA_J2000', LREAL_TO_STRING((fRightAscensionCurrent + fHourAngleInversionOffset + fHourAngleOffset/COS(fDeclination*d2r))/15.0));
//fbComm.Publish('telescope', 'dome', 'POSITION.EQUATORIAL.HA_J2000', LREAL_TO_STRING(fHourAngleCurrent - fHourAngleInversionOffset - fHourAngleOffset/COS(fDeclination*d2r)));
//fbComm.Publish('telescope', 'dome', 'POSITION.EQUATORIAL.DEC_J2000', LREAL_TO_STRING(fDeclinationCurrent - fDeclinationInversionOffset - fDeclinationOffset));
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_SlewTelescope" Id="{d3e1cb80-5564-4d5b-b2d9-2c8dd1b9215a}" FolderPath="internal methods\">
      <Declaration><![CDATA[METHOD PRIVATE _SlewTelescope : USINT
VAR_INPUT
END_VAR
VAR
	SlewEvent:	FB_Eventlog;
	command_timeout: TON;
END_VAR
VAR_STAT
	Stage:		USINT := 0;
	LastStage:	USINT := 101;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_SlewTelescope := Stage;
command_timeout(IN := Stage < 100, PT := T#600S);
IF command_timeout.Q THEN
	bError := TRUE;
	nErrorID := 16#40;
	bSlew := FALSE;
	Stage := 0;
END_IF
IF bReset OR bError THEN
	Stage := 0;
END_IF
CASE Stage OF
	0:	
		IF bReady AND bStopped AND NOT bBusy AND NOT bTracking THEN
			Stage := 25;
		END_IF
	25:
		fbElevation.Position := fElevation + PointingModelElevation(fAzimuth, fElevation, EOFF + fElevationOffset, AN_E, AE_E, TF);
		fbElevation.Velocity := 10.0;
		fbElevation.MoveAxis := TRUE;
		fbAzimuth.Position := fAzimuth + PointingModelAzimuth(fAzimuth, fElevation, AOFF + fAzimuthOffset, BNP, AN_A, AE_A, NPAE);
		fbAzimuth.Velocity := 10.0;
		fbAzimuth.MoveAxis := TRUE;
		fbDerotator.Position := fElevation + fDerotatorOffset;
		fbDerotator.Velocity := 10.0;
		fbDerotator.MoveAxis := TRUE;
		IF fbElevation.Busy AND
			fbAzimuth.Busy AND
			fbDerotator.Busy THEN
				Stage := 50;
		END_IF
	50:
		IF fbElevation.MoveDone THEN
			fbElevation.bMoveAxis := FALSE;
		END_IF
		
		IF fbAzimuth.MoveDone THEN
			fbAzimuth.MoveAxis := FALSE;
		END_IF

		IF fbDerotator.MoveDone THEN
			fbDerotator.MoveAxis := FALSE;
		END_IF
		IF NOT bSlewing AND bStopped THEN // all axis standstill
			Stage := 100;
		END_IF
	100:
		fbElevation.MoveAxis := FALSE;
		fbAzimuth.MoveAxis := FALSE;
		fbDerotator.MoveAxis := FALSE;
		fRightAscension := fRightAscensionCalc;
		fDeclination := fDeclinationCalc;
		bSlew := FALSE;
		Stage := 0;
END_CASE
SlewEvent(Trigger := Stage > LastStage, FormatString := 'Slew progress: %s', OnMessage := USINT_TO_STRING(Stage), Comm := fbComm);
LastStage := Stage;		
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_StopTelescope" Id="{cb5cd062-03c6-4c9b-bbde-9c71b10960c3}" FolderPath="internal methods\">
      <Declaration><![CDATA[METHOD PRIVATE _StopTelescope : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbElevation.StopAxis := TRUE;
fbAzimuth.StopAxis := TRUE;
fbDerotator.StopAxis := TRUE;
IF bStopped THEN
	fbElevation.StopAxis := FALSE;
	fbAzimuth.StopAxis := FALSE;
	fbDerotator.StopAxis := FALSE;
	_StopTelescope := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_TrackTelescope" Id="{6e849cc7-222d-486c-8d3d-ea253bc6d574}" FolderPath="internal methods\">
      <Declaration><![CDATA[METHOD PRIVATE _TrackTelescope : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Elevation
fDerotatorVelocity := F_Derotatorvelocity(fElevationCalc, fAzimuthCalc, telescopeConfig.latitude);
fElevationVelocity := F_Elevationvelocity(fAzimuthCalc, telescopeConfig.latitude);
fAzimuthVelocity := F_Azimuthvelocity(fElevationCalc, fAzimuthCalc, telescopeConfig.latitude);
IF fElevationCurrent < 5.0 OR fElevationCurrent > 89.5 THEN 
	bTrack := FALSE;
END_IF
IF fAzimuthCurrent > 440.0 THEN
	bTrack := FALSE;
END_IF
IF (fDerotatorCurrent < -69.0 AND fDerotatorVelocity<0.0) OR (fDerotatorCurrent > 379.0 AND fDerotatorVelocity>0.0) THEN
	bTrack := FALSE;
END_IF

fbElevation.Position := fElevationCalc;
IF NOT fbElevation.Tracking THEN
	fbElevation.Velocity := 10.0;
	fbElevation.MoveAxis := TRUE;
	IF NOT fbElevation.Busy AND fbElevation.MoveDone THEN
		fbElevation.MoveAxis := FALSE;
		IF fbElevation.isTracking THEN
			fbElevation.Velocity := fElevationVelocity;
		ELSE
			fbElevation.Velocity := 3.0*fElevationVelocity;
		END_IF
		fbElevation.Velocity := fElevationVelocity;
		fbElevation.Tracking := TRUE;
	END_IF
ELSE
	fbElevation.Velocity := fElevationVelocity;
END_IF

// Azimuth
fbAzimuth.Position := fAzimuthCalc;
IF NOT fbAzimuth.Tracking THEN
	fbAzimuth.Velocity := 10.0;
	fbAzimuth.MoveAxis := TRUE;
	IF NOT fbAzimuth.Busy AND fbAzimuth.MoveDone THEN
		fbAzimuth.MoveAxis := FALSE;
		IF fbAzimuth.isTracking THEN
			fbAzimuth.Velocity := fAzimuthVelocity;
		ELSE
			fbAzimuth.Velocity := 3.0*fAzimuthVelocity;
		END_IF
		fbAzimuth.Velocity := fAzimuthVelocity;
		fbAzimuth.Tracking := TRUE;
	END_IF
ELSE
	fbAzimuth.Velocity := fAzimuthVelocity;
END_IF

// Derotator
fbDerotator.Position := fDerotatorCalc;
IF NOT fbDerotator.Tracking THEN
	fbDerotator.Velocity := 10.0;
	fbDerotator.MoveAxis := TRUE;
	IF NOT fbDerotator.Busy AND fbDerotator.MoveDone THEN
		fbDerotator.MoveAxis := FALSE;
		IF fbDerotator.isTracking THEN
			fbDerotator.Velocity := fDerotatorVelocity;
		ELSE
			fbDerotator.Velocity := 3.0*fDerotatorVelocity;
		END_IF
		fbDerotator.Velocity := fDerotatorVelocity;
		fbDerotator.Tracking := TRUE;
	END_IF
ELSE
	fbDerotator.Velocity := fDerotatorVelocity;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Altitude" Id="{51b1ff05-1140-4331-8485-239187f5f8b1}">
      <Declaration><![CDATA[{warning 'add property implementation'}
PROPERTY Altitude : LREAL
]]></Declaration>
      <Get Name="Get" Id="{05a6ac86-f3fe-4579-ad82-04708fa0864e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Altitude := THIS^.fElevationCurrent;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Azimuth" Id="{0dd05217-329b-419a-a3b6-a7f2c3a7b182}">
      <Declaration><![CDATA[{warning 'add property implementation'}
PROPERTY Azimuth : LREAL
]]></Declaration>
      <Get Name="Get" Id="{fd6f0d71-0c53-4de5-af62-a6f082f3b2fe}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Azimuth := THIS^.fAzimuthCurrent;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Declination" Id="{b1285964-102f-45b7-af05-6785154ef40d}">
      <Declaration><![CDATA[{warning 'add property implementation'}
PROPERTY Declination : LREAL
]]></Declaration>
      <Get Name="Get" Id="{add754b0-d14d-4a0e-b482-234fdfd51176}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Declination := THIS^.fDeclination;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="DerotatorOffset" Id="{da6437af-965e-40c2-8dea-4bf926c328a7}">
      <Declaration><![CDATA[{warning 'add property implementation'}
PROPERTY DerotatorOffset : LREAL
]]></Declaration>
      <Get Name="Get" Id="{340a3d36-9a30-422a-ad59-6bebfad8b2af}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[DerotatorOffset := THIS^.fDerotatorOffset;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{647130f3-7273-4691-ba3d-1e20d8a7157d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^.fDerotatorOffset := DerotatorOffset;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Home" Id="{5b365a4e-cda4-42b8-9d62-ce493e72979f}">
      <Declaration><![CDATA[METHOD Home : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bGoHome := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{78ec73c4-02ac-4d83-aefd-694e0077d330}">
      <Declaration><![CDATA[METHOD Init : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bPower := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveAltAz" Id="{94f5e9d8-f8f7-4c16-ac3f-2e854a5b373b}">
      <Declaration><![CDATA[METHOD MoveAltAz : BOOL
VAR_INPUT
	AltAz	: BROTLib.ST_AltAzCoordinate;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fElevation 	:= AltAz.Altitude;
fAzimuth 	:= AltAz.Azimuth;
bSlew		:= TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveRaDec" Id="{86c89766-d350-4f6b-9fea-e302f9b4e7d4}">
      <Declaration><![CDATA[METHOD MoveRaDec : BOOL
VAR_INPUT
	RaDec	: BROTLib.ST_RaDecCoordinate;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fRightAscension	:= RaDec.RightAscension;
fDeclination	:= RaDec.Declination;
bGoto			:= TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Park" Id="{21fb237d-ad50-4f82-97cf-a56a9c25b954}">
      <Declaration><![CDATA[METHOD Park : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bPark := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{efa0c84e-7359-43c3-a635-1faede103859}">
      <Declaration><![CDATA[METHOD Reset : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bReset := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="RightAscension" Id="{11e4e9e9-9e18-4d9f-ab19-1c208929d2bc}">
      <Declaration><![CDATA[{warning 'add property implementation'}
PROPERTY RightAscension : LREAL
]]></Declaration>
      <Get Name="Get" Id="{b17aa26c-317b-4e3f-8426-b76a55e02df1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[RightAscension := THIS^.fRightAscension;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="SetAltitudeOffset" Id="{522d462f-4678-4f02-8df4-00f463761b00}">
      <Declaration><![CDATA[METHOD SetAltitudeOffset : BOOL
VAR_INPUT
	Offset	: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fElevationOffset := Offset;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetAzimuthOffset" Id="{16e0d010-c333-4c19-862e-702e715c040b}">
      <Declaration><![CDATA[METHOD SetAzimuthOffset : BOOL
VAR_INPUT
	Offset	: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fAzimuthOffset := Offset;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetDerotatorOffset" Id="{f59933b1-4aa9-4f18-88cf-26244adda0df}">
      <Declaration><![CDATA[METHOD SetDerotatorOffset : BOOL
VAR_INPUT
	Offset	: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fDerotatorOffset := Offset;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Slew" Id="{ee4e9e45-2bba-488b-8094-f2bf4a28ec2b}">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Slew : BOOL
VAR_INPUT
	fAzimuth	: LREAL;
	fAltitude	: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.fElevation 	:= fAltitude;
THIS^.fAzimuth 	:= fAzimuth;
THIS^.bSlew		:= TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stop" Id="{d33b3161-dc8a-45e5-ae2f-544550162c16}">
      <Declaration><![CDATA[METHOD Stop : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bStop := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Track" Id="{36f6a798-1a7b-442f-88f7-fc8d7dfa3dc0}">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Track : BOOL
VAR_INPUT
	fRightAscension	: LREAL;
	fDeclination	: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.fRightAscension	:= fRightAscension;
THIS^.fDeclination		:= fDeclination;
THIS^.bTrack			:= TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TrackRaDec" Id="{f497d99f-36a3-42c8-ae9b-738903f3158c}">
      <Declaration><![CDATA[METHOD TrackRaDec : BOOL
VAR_INPUT
	RaDec	: BROTLib.ST_RaDecCoordinate;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fRightAscension	:= RaDec.RightAscension;
fDeclination		:= RaDec.Declination;
bTrack			:= TRUE;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_MonetTelescopeControl2">
      <LineId Id="863" Count="2" />
      <LineId Id="364" Count="1" />
      <LineId Id="866" Count="0" />
      <LineId Id="367" Count="0" />
      <LineId Id="869" Count="10" />
      <LineId Id="382" Count="0" />
      <LineId Id="880" Count="0" />
      <LineId Id="882" Count="10" />
      <LineId Id="899" Count="3" />
      <LineId Id="898" Count="0" />
      <LineId Id="893" Count="4" />
      <LineId Id="881" Count="0" />
      <LineId Id="904" Count="1" />
      <LineId Id="903" Count="0" />
      <LineId Id="383" Count="4" />
      <LineId Id="390" Count="0" />
      <LineId Id="906" Count="8" />
      <LineId Id="398" Count="75" />
      <LineId Id="924" Count="6" />
      <LineId Id="923" Count="0" />
      <LineId Id="931" Count="0" />
      <LineId Id="474" Count="1" />
      <LineId Id="859" Count="3" />
      <LineId Id="480" Count="1" />
      <LineId Id="764" Count="41" />
      <LineId Id="808" Count="31" />
      <LineId Id="841" Count="4" />
      <LineId Id="858" Count="0" />
      <LineId Id="846" Count="3" />
      <LineId Id="856" Count="0" />
      <LineId Id="850" Count="5" />
      <LineId Id="532" Count="68" />
      <LineId Id="933" Count="9" />
      <LineId Id="950" Count="0" />
      <LineId Id="943" Count="6" />
      <LineId Id="932" Count="0" />
      <LineId Id="601" Count="14" />
      <LineId Id="753" Count="0" />
      <LineId Id="752" Count="0" />
      <LineId Id="754" Count="8" />
      <LineId Id="662" Count="0" />
      <LineId Id="696" Count="55" />
      <LineId Id="179" Count="0" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2._GotoTelescope">
      <LineId Id="1" Count="76" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2._HomeTelescope">
      <LineId Id="1" Count="34" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2._ParkTelescope">
      <LineId Id="1" Count="86" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2._PowerOn">
      <LineId Id="1" Count="54" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2._SendTelemetry">
      <LineId Id="197" Count="0" />
      <LineId Id="81" Count="115" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2._SlewTelescope">
      <LineId Id="1" Count="57" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2._StopTelescope">
      <LineId Id="1" Count="9" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2._TrackTelescope">
      <LineId Id="1" Count="69" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2.Altitude.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2.Azimuth.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2.Declination.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2.DerotatorOffset.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2.DerotatorOffset.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2.Home">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2.Init">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2.MoveAltAz">
      <LineId Id="1" Count="2" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2.MoveRaDec">
      <LineId Id="1" Count="2" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2.Park">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2.Reset">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2.RightAscension.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2.SetAltitudeOffset">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2.SetAzimuthOffset">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2.SetDerotatorOffset">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2.Slew">
      <LineId Id="9" Count="1" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2.Stop">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2.Track">
      <LineId Id="9" Count="1" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2.TrackRaDec">
      <LineId Id="1" Count="2" />
    </LineIds>
  </POU>
</TcPlcObject>