<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="FB_MonetTelescopeControl2" Id="{392c90d3-a441-4c8d-a752-42b25b49f5cd}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MonetTelescopeControl2 EXTENDS FB_AltAzTelescopeControl
VAR_INPUT
	fbFocus				: I_Focus;
	fbCovers			: I_MirrorCovers;
	fbBrake				: I_Brake;	
	fbHydraulics   		: I_Hydraulics;
	fbElevation			: REFERENCE TO FB_ElevationControl;
	fbAzimuth			: REFERENCE TO FB_AzimuthControl;
	fbDerotator			: REFERENCE TO FB_DerotatorControl;
	bEstopTriggered		: BOOL := FALSE;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	bSlewing			: BOOL;
	bStopped			: BOOL;
	bTracking			: BOOL;
	bHomed				: BOOL;
	bReady				: BOOL;
	bBusy				: BOOL;
	tonTrackingDelay	: TON;		// tracking delay
	TelescopeAuxiliary	: FB_TelescopeAuxiliary;
	rtrigReset			: R_TRIG;
	nErrorID			: UDINT;
	fSlewTime			: LREAL;
	tpPowerOnWarning	: TP;		// triggers power warning
	tonPowerTimeout		: TON;		// power on timeout
	StatusWord, LastStatus:	UDINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TelescopeAuxiliary(comm := comm);

rtrigReset(CLK := bReset);

IF fbElevation.Error THEN
	nErrorID := fbElevation.nErrorID;
	fbElevation.bReset := bReset;
ELSIF fbAzimuth.bError THEN
	nErrorID := fbAzimuth.nErrorID;
	fbAzimuth.bReset := bReset;
ELSIF fbFocus <> 0 AND_THEN fbFocus.Error THEN
	nErrorID := fbFocus.ErrorID;
	IF rtrigReset.Q THEN
		fbFocus.Reset();
	END_IF
ELSIF fbDerotator.bError THEN
	nErrorID := fbDerotator.nErrorID;
	fbDerotator.bReset := bReset;
END_IF

bError := fbElevation.Error OR fbAzimuth.bError OR fbFocus.Error OR fbDerotator.bError;

fSlewTime := MAX(MAX(fbElevation.fSlewTime, fbAzimuth.fSlewTime), fbDerotator.fSlewTime);
			
IF bError THEN
	fbMachine.State := E_TelescopeState.error;
ELSE
	nErrorID := 0;
END_IF

IF fbElevation.bError THEN
	fbElevation.Enable := FALSE;
	fbAzimuth.Enable := FALSE;
	fbBrake.CloseBrake();
END_IF

// is telescope slewing?
bSlewing := NOT bTracking AND (fbElevation.fbAxis.InMotion OR fbElevation.fbAxis.InRamp OR
			fbAzimuth.fbAxis.InMotion OR fbAzimuth.fbAxis.InRamp OR
			fbDerotator.fbAxis.InMotion OR fbDerotator.fbAxis.InRamp);
			
// signal must be stable for 5500MS
tonTrackingDelay(
	in := fbElevation.fbAxis.isTracking AND fbAzimuth.fbAxis.isTracking AND fbDerotator.fbAxis.isTracking,
	PT :=T#5500MS, 
	Q => bTracking);
			
// is telescope stopped?
bStopped := (NOT fbElevation.bEnable OR fbElevation.fbAxis.StandStill) AND 
			(NOT fbAzimuth.bEnable OR fbAzimuth.fbAxis.StandStill) AND
			(NOT fbDerotator.bEnable OR fbDerotator.fbAxis.StandStill);
			
// get current coordinates	
fAzimuthCurrent := fbAzimuth.fActualPosition;
fElevationCurrent := fbElevation.fActualPosition;
fDerotatorCurrent := fbDerotator.fActualPosition;

// call super
SUPER^();

// homed, ready, busy
bHomed := fbElevation.bCalibrated AND fbAzimuth.bCalibrated AND fbDerotator.bCalibrated AND fbFocus.Calibrated;
bReady := bHomed AND fbCovers.Opened AND fbElevation.bEnable AND fbAzimuth.bEnable AND fbDerotator.bEnable AND fbBrake.BrakeOpen AND NOT bError;
bBusy  := fbElevation.fbAxis.Busy OR fbAzimuth.fbAxis.Busy OR fbDerotator.fbAxis.Busy OR fbFocus.Busy;

// estop?
IF bEstopTriggered THEN
	fbElevation.Enable := FALSE;
	fbAzimuth.Enable := FALSE;
	fbDerotator.Enable := FALSE;
END_IF

IF bSlewing OR bTracking THEN
	MQTTTimer.PT := T#1000MS;
ELSE
	MQTTTimer.PT := T#5000MS;
END_IF
MQTTTimer(IN:=TRUE);
IF MQTTTimer.Q THEN // publish new payload every second
	MQTTTimer(IN:=FALSE);

	comm.Publish('telescope', 'dome', 'JulianDate', LREAL_TO_STRING(fJD));
	comm.Publish('telescope', 'dome', 'LocalSiderialTime', LREAL_TO_STRING(fLST));
	comm.Publish('telescope', 'dome', 'Azimuth', LREAL_TO_STRING(fAzimuthCurrent));
	comm.Publish('telescope', 'dome', 'Elevation', LREAL_TO_STRING(fElevationCurrent));
	comm.Publish('telescope', 'dome', 'Derotator', LREAL_TO_STRING(fDerotatorCurrent));
	comm.Publish('telescope', 'dome', 'HourAngle', LREAL_TO_STRING(fHourAngleCalc));
	//comm.Publish('telescope', 'dome', 'RightAscension', LREAL_TO_STRING(rightascension_calc));
	//comm.Publish('telescope', 'dome', 'Declination', LREAL_TO_STRING(declination_calc));
	comm.Publish('telescope', 'dome', 'RightAscension', LREAL_TO_STRING(fRightAscension));
	comm.Publish('telescope', 'dome', 'Declination', LREAL_TO_STRING(fDeclination));
	comm.Publish('telescope', 'dome', 'azimuth_offset', LREAL_TO_STRING(fAzimuthOffset));
	comm.Publish('telescope', 'dome', 'elevation_offset', LREAL_TO_STRING(fElevationOffset));
	comm.Publish('telescope', 'dome', 'derotator_torque', LREAL_TO_STRING(fbDerotator.fTorque));
	comm.Publish('telescope', 'dome', 'elevation_torque', LREAL_TO_STRING(fbElevation.fTorque));
	comm.Publish('telescope', 'dome', 'azimuth_torque', LREAL_TO_STRING(fbAzimuth.fTorque));
	
	comm.Publish('telescope', 'dome', 'errorid',		UDINT_TO_STRING(nErrorID));
	comm.Publish('telescope', 'dome', 'error',		BOOL_TO_STRING(bError));
	comm.Publish('telescope', 'dome', 'ready',		BOOL_TO_STRING(bReady));
	comm.Publish('telescope', 'dome', 'busy',		BOOL_TO_STRING(bBusy));
	comm.Publish('telescope', 'dome', 'sliding',		BOOL_TO_STRING(bSlewing));
	comm.Publish('telescope', 'dome', 'tracking', 	BOOL_TO_STRING(bTracking));
	comm.Publish('telescope', 'dome', 'stopped',		BOOL_TO_STRING(bStopped));
	comm.Publish('telescope', 'dome', 'homed',		BOOL_TO_STRING(bHomed));
	//comm.Publish('telescope', 'dome', 'parked',		BOOL_TO_STRING(isparked));
	
	comm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.AZ', LREAL_TO_STRING(fAzimuthCurrent));
	comm.Publish('telescope', 'dome', 'POSITION.INSTRUMENTAL.ALT', LREAL_TO_STRING(fElevationCurrent));
	comm.Publish('telescope', 'dome', 'POSITION.CURRENT.AZ', LREAL_TO_STRING(fAzimuthPointing));
	comm.Publish('telescope', 'dome', 'POSITION.CURRENT.ALT', LREAL_TO_STRING(fElevationPointing));
	comm.Publish('telescope', 'dome', 'POSITION.CURRENT.RA', LREAL_TO_STRING(fRightAscensionPointing));
	comm.Publish('telescope', 'dome', 'POSITION.CURRENT.DEC', LREAL_TO_STRING(fDeclinationPointing));
	comm.Publish('telescope', 'dome', 'POSITION.REAL.AZ', LREAL_TO_STRING(fAzimuthCurrent));
	comm.Publish('telescope', 'dome', 'POSITION.REAL.ALT', LREAL_TO_STRING(fElevationCurrent));

END_IF

StatusWord.0 := bError;
StatusWord.1 := bReady;
StatusWord.2 := bSlewing;
StatusWord.3 := bTracking;
StatusWord.4 := bStopped;
StatusWord.5 := bHomed;
StatusWord.6 := bPower;
StatusWord.7 := bPark;
//StatusWord.8 := bGoHome;
StatusWord.9 := bTrack;
//StatusWord.10 := bGoto;
StatusWord.11 := bSlew;
StatusWord.12 := bStop;
StatusWord.13 := bBusy;

IF StatusWord<>LastStatus THEN // publish new payload every second
	LastStatus := StatusWord;
	comm.Publish('telescope', 'dome', 'error',		BOOL_TO_STRING(bError));
	comm.Publish('telescope', 'dome', 'ready',		BOOL_TO_STRING(bReady));
	comm.Publish('telescope', 'dome', 'sliding',		BOOL_TO_STRING(bSlewing));
	comm.Publish('telescope', 'dome', 'tracking', 	BOOL_TO_STRING(bTracking));
	comm.Publish('telescope', 'dome', 'stopped',		BOOL_TO_STRING(bStopped));
	comm.Publish('telescope', 'dome', 'homed',		BOOL_TO_STRING(bHomed));
	comm.Publish('telescope', 'dome', 'power',		BOOL_TO_STRING(bPower));
	comm.Publish('telescope', 'dome', 'park',		BOOL_TO_STRING(bPark));
	//comm.Publish('telescope', 'dome', 'gohome',		BOOL_TO_STRING(bGoHome));
	comm.Publish('telescope', 'dome', 'track',		BOOL_TO_STRING(bTrack));
	//comm.Publish('telescope', 'dome', 'goto',		BOOL_TO_STRING(bGoto));
	comm.Publish('telescope', 'dome', 'slew',		BOOL_TO_STRING(bSlew));
	comm.Publish('telescope', 'dome', 'stop',		BOOL_TO_STRING(bStop));
	comm.Publish('telescope', 'dome', 'busy',		BOOL_TO_STRING(bBusy));
END_IF


(* Event function blocks start here. *)
//TCSpowerEvent(	Trigger := powerfailure, 
//				Level := ADSLOG_MSGTYPE_ERROR,
//				FormatString := 'power %s',
//				//OnMessage := 'Failure',
//				OffMessage := 'OK', 
//				Comm := comm);

//TCSgohomeEvent(	Trigger := bGoHome, 
//				Level := ADSLOG_MSGTYPE_HINT,
//				FormatString := 'GOHOME %s',
//				OnMessage := 'commencing',
//				OffMEssage := 'completed', 
//				Comm := comm);
//TCSparkEvent(	Trigger := bPark, 
//				Level := ADSLOG_MSGTYPE_HINT,
//				FormatString := 'PARK %s',
//				OnMessage := 'commencing',
//				OffMEssage := 'completed', 
//				Comm := comm);
//TCSgotoEvent(	Trigger := bGoto, 
//				Level := ADSLOG_MSGTYPE_HINT,
//				FormatString := 'GOTO %s',
//				OnMessage := 'commencing',
//				OffMEssage := 'completed', 
//				Comm := comm);
TCStrackEvent(	Trigger := bTrack, 
				Level := ADSLOG_MSGTYPE_HINT,
				FormatString := 'TRACK %s',
				OnMessage := 'commencing',
				OffMEssage := 'completed', 
				Comm := comm);
TCSstopEvent(	Trigger := bStop, 
				Level := ADSLOG_MSGTYPE_WARN,
				FormatString := 'STOP %s',
				OnMessage := 'commencing',
				OffMEssage := 'completed',
				OffLevel := ADSLOG_MSGTYPE_HINT, 
				Comm := comm);
AltitudeEvent(	Trigger := bPower AND fElevationCalc<0.0, 
				Level := ADSLOG_MSGTYPE_WARN,
				FormatString := '%s',
				OnMessage := 'Target below horizon',
				OffMEssage := '', 
				Comm := comm);
TCSreadyEvent(	Trigger := bPower AND bReady, 
				Level := ADSLOG_MSGTYPE_HINT,
				FormatString := '%s',
				OnMessage := 'STELLA1 startup finished', 
				Comm := comm);
//TCSCTOEvent(	Trigger := command_timeout.Q,
//				Level := ADSLOG_MSGTYPE_WARN,
//				FormatString := 'A timeout occured during %s command!',
//				OnMessage := 'NOCOMMAND', 
//				Comm := comm);]]></ST>
    </Implementation>
    <Method Name="_Initialize" Id="{b82ca6ca-e327-451f-ab83-9e7ad8e568da}">
      <Declaration><![CDATA[METHOD _Initialize : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bBrakeClearing THEN
	bPowerFailure := TRUE;
	TCSpowerEvent.OnMessage := 'failure: brake clearing not set';
	bPower := FALSE;
ELSIF bError THEN
	bPowerFailure := TRUE;
	TCSpowerEvent.OnMessage := 'Generic error during power on occured.';
	bPower := FALSE;
ELSE
	bPowerFailure := FALSE;		
END_IF

// COVER MUST BE OPENED FOR A SUCCESSFUL WAKE & SHAKE COMMAND!
fbCovers.Open();

// enable elevation, enable azimuth
IF fbCovers.Opened THEN
	fbElevation.Enable := TRUE;
	fbAzimuth.Enable := TRUE;
	fbDerotator.Enable := TRUE;
END_IF

IF fbElevation.Ready AND NOT fbElevation.Calibrated THEN
	fbElevation.HomeAxis := TRUE;
END_IF

IF fbAzimuth.Ready AND NOT fbAzimuth.Calibrated THEN
	fbAzimuth.HomeAxis := TRUE;
END_IF

// enable derotator
IF fbElevation.Ready THEN
	fbDerotator.HomeAxis := fbDerotator.Ready AND NOT fbDerotator.Calibrated;
END_IF

// start calibration of focus after elevation has been calibrated
// this avoids imbalance by the M2 mirror on the elvation during its calibration
IF fbElevation.Calibrated AND NOT fbFocus.Calibrated THEN
	fbFocus.Enable := TRUE;
	fbFocus.HomeAxis := TRUE;
END_IF

IF fbCovers.Opened AND fbElevation.Calibrated AND fbAzimuth.Calibrated AND fbDerotator.Calibrated AND fbFocus.Calibrated THEN
	bPower := FALSE;
	_Initialize := TRUE;
ELSE
	_Initialize := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_Park" Id="{b753730c-f439-4fd9-a185-d431d3c6a732}">
      <Declaration><![CDATA[METHOD _Park : BOOL
VAR_INPUT
END_VAR
VAR
	ParkEvent	: FB_Eventlog;
END_VAR
VAR_STAT
	Stage		: USINT := 0;
	LastStage	: USINT := 101;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbCovers.Close();
_Park := fbCovers.Closed;

(*
IF bReset OR bError THEN
	Stage := 0;
END_IF
_Park := FALSE;
CASE Stage OF
	0: 
		fbFocus.Position := telescopeConfig.focusPark;
		IF bError THEN // emergency park
			fbBrake.CloseBrake();
			fbElevation.Enable := FALSE;
			fbAzimuth.Enable := FALSE;
			fbDerotator.Enable := FALSE;	
			fbCovers.Close();	
			Stage := 80;
		END_IF
		Stage := 20;
	20:
		fbElevation.Position := telescopeConfig.elevationPark;
		fbElevation.Velocity := 10.0;
		fbElevation.MoveAxis := TRUE;
		fbAzimuth.Position := telescopeConfig.azimuthPark;
		fbAzimuth.Velocity := 10;
		fbAzimuth.MoveAxis := TRUE;
		fbDerotator.Position := telescopeConfig.derotatorPark;
		fbDerotator.Velocity := 10.0;
		fbDerotator.MoveAxis := TRUE;
		IF fbElevation.Busy AND
			fbAzimuth.Busy AND
			fbDerotator.Busy THEN
				Stage := 40;
		END_IF
	40:
		IF fbElevation.MoveDone THEN
			fbElevation.MoveAxis := FALSE;
		END_IF
		IF fbAzimuth.MoveDone THEN
			fbAzimuth.MoveAxis := FALSE;
		END_IF
		IF fbDerotator.MoveDone THEN
			fbDerotator.MoveAxis := FALSE;
		END_IF
		IF NOT bSlewing THEN // all axis standstill
			Stage := 60;
		END_IF
	60:
		IF NOT fbElevation.Enable AND NOT fbAzimuth.Enable AND NOT fbDerotator.Enable THEN
			stage := 80;
		END_IF

		IF bStopped THEN
			fbElevation.Enable := FALSE;
			fbAzimuth.Enable := FALSE;
			fbDerotator.Enable := FALSE;
		END_IF
		
		fbElevation.bMoveAxis := FALSE;
		fbAzimuth.bMoveAxis := FALSE;
		fbDerotator.bMoveAxis := FALSE;
	80:
		IF fbElevation.Enable OR fbAzimuth.Enable OR fbDerotator.Enable THEN
			stage := 60;
		END_IF
		IF NOT fbBrake.BrakeOpen THEN
			fbCovers.Close();
			fbHydraulics.Enable := FALSE;
		END_IF
		IF fbCovers.Closed THEN
			Stage := 100;
		END_IF
	100:
		_Park := TRUE;
		Stage := 0;	
END_CASE
ParkEvent(Trigger := Stage > LastStage, FormatString := 'Parking progress: %s', OnMessage := USINT_TO_STRING(Stage), comm := comm);
LastStage := Stage;
*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="_Slew" Id="{b97e5388-b217-43fc-a742-07bcca507bbe}">
      <Declaration><![CDATA[METHOD PRIVATE _Slew : BOOL;
VAR_INPUT
END_VAR
VAR
	SlewEvent			:	FB_Eventlog;
	tonCommandTimeout	: TON;
END_VAR
VAR_STAT
	iStage				: USINT;
	iLastStage			: USINT := 101;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_Slew := FALSE;
tonCommandTimeout(IN := iStage < 100, PT := T#600S);
IF tonCommandTimeout.Q THEN
	bError := TRUE;
	//errorid := 16#40;
	//bSlew := FALSE;
	_Slew := FALSE;
	iStage := 0;
END_IF
IF bReset OR bError THEN
	iStage := 0;
END_IF
CASE iStage OF
	0:	
		IF bReady AND bStopped AND NOT bBusy AND NOT bTracking THEN
			iStage := 25;
		END_IF
	25:
		fbElevation.Position := fElevation + PointingModelElevation(fAzimuth, fElevation, EOFF + fElevationOffset, AN_E, AE_E, TF);
		fbElevation.Velocity := 10.0;
		fbElevation.MoveAxis := TRUE;
		fbAzimuth.Position := fAzimuth + PointingModelAzimuth(fAzimuth, fElevation, AOFF + fAzimuthOffset, BNP, AN_A, AE_A, NPAE);
		fbAzimuth.Velocity := 10.0;
		fbAzimuth.MoveAxis := TRUE;
		fbDerotator.Position := fElevation + fDerotatorOffset;
		fbDerotator.Velocity := 10.0;
		fbDerotator.MoveAxis := TRUE;
		IF fbElevation.Busy AND fbAzimuth.Busy AND fbDerotator.Busy THEN
			iStage := 50;
		END_IF
	50:
		IF fbElevation.MoveDone THEN
			fbElevation.bMoveAxis := FALSE;
		END_IF
		
		IF fbAzimuth.MoveDone THEN
			fbAzimuth.MoveAxis := FALSE;
		END_IF

		IF fbDerotator.MoveDone THEN
			fbDerotator.MoveAxis := FALSE;
		END_IF
		IF NOT bSlewing AND bStopped THEN // all axis standstill
			iStage := 100;
		END_IF
	100:
		fbElevation.MoveAxis := FALSE;
		fbAzimuth.MoveAxis := FALSE;
		fbDerotator.MoveAxis := FALSE;
		fRightAscension := fRightAscensionCalc;
		fDeclination := fDeclinationCalc;
		_Slew := TRUE;
END_CASE

SlewEvent(Trigger := iStage > iLastStage, FormatString := 'Slew progress: %s', OnMessage := USINT_TO_STRING(iStage), comm := comm);
iLastStage := iStage;		
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_Stop" Id="{25d1a575-544b-48f0-8dce-8d30aad96001}">
      <Declaration><![CDATA[METHOD _Stop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbElevation.StopAxis := TRUE;
fbAzimuth.StopAxis := TRUE;
fbDerotator.StopAxis := TRUE;
_Stop := FALSE;

IF bStopped THEN
	fbElevation.StopAxis := FALSE;
	fbAzimuth.StopAxis := FALSE;
	fbDerotator.StopAxis := FALSE;
	_Stop := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="_Track" Id="{bb0a3c7f-5e67-4187-be04-e73fcf00db3f}">
      <Declaration><![CDATA[METHOD _Track : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fDerotatorVelocity := F_Derotatorvelocity(fElevationCalc, fAzimuthCalc, telescopeConfig.latitude);
fElevationVelocity := F_Elevationvelocity(fAzimuthCalc, telescopeConfig.latitude);
fAzimuthVelocity := F_Azimuthvelocity(fElevationCalc, fAzimuthCalc, telescopeConfig.latitude);

IF fElevationCurrent < 5.0 OR fElevationCurrent > 89.5 THEN 
	bTrack := FALSE;
END_IF
IF fAzimuthCurrent > 440.0 THEN
	bTrack := FALSE;
END_IF
IF (fDerotatorCurrent < -69.0 AND fDerotatorVelocity<0.0) OR (fDerotatorCurrent > 379.0 AND fDerotatorVelocity>0.0) THEN
	bTrack := FALSE;
END_IF

// Elevation
fbElevation.Position := fElevationCalc;
IF NOT fbElevation.Tracking THEN
	fbElevation.Velocity := 10.0;
	fbElevation.MoveAxis := TRUE;
	IF NOT fbElevation.Busy AND fbElevation.MoveDone THEN
		fbElevation.MoveAxis := FALSE;
		IF fbElevation.isTracking THEN
			fbElevation.Velocity := fElevationVelocity;
		ELSE
			fbElevation.Velocity := 3.0*fElevationVelocity;
		END_IF
		fbElevation.Velocity := fElevationVelocity;
		fbElevation.Tracking := TRUE;
	END_IF
ELSE
	fbElevation.Velocity := fElevationVelocity;
END_IF

// Azimuth
fbAzimuth.Position := fAzimuthCalc;
IF NOT fbAzimuth.Tracking THEN
	fbAzimuth.Velocity := 10.0;
	fbAzimuth.MoveAxis := TRUE;
	IF NOT fbAzimuth.Busy AND fbAzimuth.MoveDone THEN
		fbAzimuth.MoveAxis := FALSE;
		IF fbAzimuth.isTracking THEN
			fbAzimuth.Velocity := fAzimuthVelocity;
		ELSE
			fbAzimuth.Velocity := 3.0*fAzimuthVelocity;
		END_IF
		fbAzimuth.Velocity := fAzimuthVelocity;
		fbAzimuth.Tracking := TRUE;
	END_IF
ELSE
	fbAzimuth.Velocity := fAzimuthVelocity;
END_IF

// Derotator
fbDerotator.Position := fDerotatorCalc;
IF NOT fbDerotator.Tracking THEN
	fbDerotator.Velocity := 10.0;
	fbDerotator.MoveAxis := TRUE;
	IF NOT fbDerotator.Busy AND fbDerotator.MoveDone THEN
		fbDerotator.MoveAxis := FALSE;
		IF fbDerotator.isTracking THEN
			fbDerotator.Velocity := fDerotatorVelocity;
		ELSE
			fbDerotator.Velocity := 3.0*fDerotatorVelocity;
		END_IF
		fbDerotator.Velocity := fDerotatorVelocity;
		fbDerotator.Tracking := TRUE;
	END_IF
ELSE
	fbDerotator.Velocity := fDerotatorVelocity;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_MonetTelescopeControl2">
      <LineId Id="124" Count="0" />
      <LineId Id="134" Count="19" />
      <LineId Id="157" Count="3" />
      <LineId Id="178" Count="0" />
      <LineId Id="165" Count="7" />
      <LineId Id="123" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="17" Count="2" />
      <LineId Id="25" Count="0" />
      <LineId Id="60" Count="1" />
      <LineId Id="65" Count="2" />
      <LineId Id="63" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="26" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="53" Count="2" />
      <LineId Id="51" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="71" Count="1" />
      <LineId Id="79" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="95" Count="4" />
      <LineId Id="70" Count="0" />
      <LineId Id="191" Count="134" />
      <LineId Id="179" Count="0" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2._Initialize">
      <LineId Id="6" Count="10" />
      <LineId Id="60" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="64" Count="0" />
      <LineId Id="20" Count="27" />
      <LineId Id="52" Count="1" />
      <LineId Id="57" Count="2" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2._Park">
      <LineId Id="109" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="13" Count="2" />
      <LineId Id="98" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="28" Count="62" />
      <LineId Id="93" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2._Slew">
      <LineId Id="150" Count="27" />
      <LineId Id="180" Count="27" />
      <LineId Id="58" Count="0" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2._Stop">
      <LineId Id="6" Count="2" />
      <LineId Id="15" Count="1" />
      <LineId Id="9" Count="5" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_MonetTelescopeControl2._Track">
      <LineId Id="13" Count="2" />
      <LineId Id="83" Count="0" />
      <LineId Id="16" Count="8" />
      <LineId Id="82" Count="0" />
      <LineId Id="25" Count="55" />
    </LineIds>
  </POU>
</TcPlcObject>