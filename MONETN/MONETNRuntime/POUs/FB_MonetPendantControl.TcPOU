<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.8">
  <POU Name="FB_MonetPendantControl" Id="{e2b10f6c-d16d-4403-9ebe-8d8a369c8dbd}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MonetPendantControl
VAR_INPUT
	eTelescopeMode		: E_TelescopeMode;
	fbCovers			: REFERENCE TO FB_CoverControl;
	fbBrake				: REFERENCE TO FB_HydraulicsControl;
	fbHydraulics		: REFERENCE TO FB_HydraulicsControl;
	fbFocus		 		: REFERENCE TO FB_FocusControl;
	fbElevation			: REFERENCE TO FB_ElevationControl;
	fbAzimuth	 		: REFERENCE TO FB_AzimuthControl;
	fbDerotator			: REFERENCE TO FB_DerotatorControl;
	fbTelescope			: REFERENCE TO FB_TelescopeControl;	
END_VAR
VAR_OUTPUT
	bEnable				: BOOL;
END_VAR
VAR
	comm				: I_Comm;

	nSelection			: UINT;		// program selection of the pendant control
	bError				: BOOL;		// error on the pendant control
	bHorn				: BOOL;
	fbStartTrigger		: R_TRIG;
	DerotatorEnable		: FB_ButtonEnable;
	ElevationEnable		: FB_ButtonEnable;
	AzimuthEnable		: FB_ButtonEnable;
	TelescopeControlEnable: 	FB_ButtonEnable;
	TrackingEnable:			FB_ButtonEnable;
	ResetDelay:	TON;
	TwinCATRestart: TC_Restart;
	up_trigger:	R_TRIG;
	down_trigger:	R_TRIG;	
	
	reset_trigger		: R_TRIG;

	//DIN17 2.0
	BCD0		AT%I*: BOOL;
	//DIN18 2.1
	BCD2		AT%I*: BOOL;
	//DIN19 2.2
	BCD4		AT%I*: BOOL;
	//DIN20 2.3
	BCD8		AT%I*: BOOL;
	//DIN21 2.4
	reset_switch	AT%I*: BOOL;
	//DIN22 2.5
	direction_up	AT%I*: BOOL;
	//DIN23 2.6
	direction_down	AT%I*: BOOL;
	//DIN24 2.7
	key_switch		AT%I*: BOOL;
	//DIN25 3.0 (enable)
	start_switch	AT%I*: BOOL;
	//DIN26 3.1
	direction_left	AT%I*: BOOL;
	//DIN27 3.2
	direction_right	AT%I*: BOOL;
	
	// Outputs
	
	//DOUT9 1.0
	lamp_up			AT%Q*: BOOL;
	//DOUT10 1.1
	lamp_down			AT%Q*: BOOL;
	//DOUT11 1.2
	lamp_right			AT%Q*: BOOL;
	//DOUT12 1.3
	lamp_left			AT%Q*: BOOL;
	//DOUT13 1.4
	lamp_error			AT%Q*: BOOL;	
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* 
This program is responsible for the manual control of the telescope.
all movable parts can be controlled from here. This is mainly for testing and
maintenance.
WARNING! Some of the safety routines are disabled, when operating the telescope manually.
*)
// calculate the value of the selector
nSelection := 1*BOOL_TO_UINT(BCD0) + 
			 2*BOOL_TO_UINT(BCD2) + 
			 4*BOOL_TO_UINT(BCD4) +
			 8*BOOL_TO_UINT(BCD8);

// detect disconnection of the manual controls (should also trigger emergency stop).			 
bError := (nSelection = 0);

// disable all the lamps
lamp_left := FALSE;
lamp_right := FALSE;
lamp_up := FALSE;
lamp_down := FALSE;
bHorn := FALSE;

up_trigger(CLK := direction_up);
down_trigger(CLK := direction_down);
//R_Enable(CLK := enable);
// the error lamp is the same as the error lamp of the main panel
lamp_error := lamp_error;

// enabled?
bEnable := key_switch;
IF NOT bEnable THEN
	RETURN;
END_IF

// reset or start pushed?
reset_trigger(CLK := reset_switch);
fbStartTrigger(CLK := start_switch);

// mode
IF eTelescopeMode = E_TelescopeMode.automatic THEN
	;
END_IF

// enable only the selected item and connect lamps and buttons accordingly
CASE nSelection OF
	1, 2, 3:	// reserved for Cover 1-3 control
		lamp_up := fbCovers.IabCoverOpen[nSelection];
		lamp_down := fbCovers.IabCoverClosed[nSelection];
		IF key_switch THEN
			fbCovers.OabOpenCover[nSelection] := direction_up AND fbCovers.IabCoverOpen[nSelection];
			fbCovers.OabCloseCover[nSelection] := direction_down AND fbCovers.IabCoverClosed[nSelection];
			lamp_error := fbCovers.abCoverError[nSelection];	
		ELSE
			IF direction_down THEN 
				fbCovers.Close();
			ELSIF direction_up THEN
				fbCovers.Open();
			END_IF		
		END_IF
		
	4:	// Nasmyth / mirror M3 control
		
	5:	// Focus Control
		IF __ISVALIDREF(fbFocus) THEN
			lamp_up := fbFocus.Ready AND NOT fbFocus.InPosLimit;
			lamp_down := fbFocus.Ready AND NOT fbFocus.InNegLimit;
			IF key_switch THEN
				IF fbStartTrigger.Q THEN
					fbFocus.Enable := NOT fbFocus.Enable;
				END_IF
				fbFocus.MovePos := direction_up;
				fbFocus.MoveNeg := direction_down;
				IF reset_trigger.Q THEN
					fbFocus.Reset();
				END_IF
				lamp_error := fbFocus.Error;
			END_IF
		END_IF
							
	6:	// Derotator control
		lamp_left  := fbDerotator.Ready AND NOT fbDerotator.InNegLimit;
		lamp_right := fbDerotator.Ready AND NOT fbDerotator.InPosLimit;
		IF key_switch THEN
			DerotatorEnable(SET := start_switch, Q := fbDerotator.bEnable);
			fbDerotator.MoveNeg := direction_left AND NOT fbDerotator.inDigitalInputs.1;
			fbDerotator.MovePos := direction_right AND NOT fbDerotator.inDigitalInputs.0;
			fbDerotator.bReset := reset_switch;
			lamp_error := fbDerotator.Error;
		END_IF
							
	7:	// Elevation Control
		
		fbElevation.MovePos := direction_up AND fbElevation.inDigitalInputs.0;
		fbElevation.MoveNeg := direction_down AND fbElevation.inDigitalInputs.1;
		IF key_switch THEN
			ElevationEnable(
				SET := start_switch, 
				Q := fbElevation.bEnable);	
		END_IF
		fbElevation.bReset := reset_switch;
		lamp_up := fbElevation.inDigitalInputs.0;
		lamp_down := fbElevation.inDigitalInputs.1;
		lamp_error := fbElevation.bError;
		
	8:	// Azimuth Control
		lamp_left := fbAzimuth.inDigitalInputs.0; // NOT GVL_Telescope.azimut_limit_switch;
		lamp_right := fbAzimuth.inDigitalInputs.1; // NOT GVL_Telescope.azimut_limit_switch;
		fbAzimuth.MoveNeg := direction_left AND fbAzimuth.inDigitalInputs.0;
		fbAzimuth.MovePos := direction_right AND fbAzimuth.inDigitalInputs.1;
		fbAzimuth.bReset := reset_switch;
		IF key_switch THEN
			AzimuthEnable(
				SET := start_switch, 
				Q := fbAzimuth.bEnable);
			lamp_error := fbAzimuth.Error;
		END_IF
		
	9: 	// Dome control
		
	10:	// FilterWheel control
		
	11: lamp_up := fbElevation.fTorque > 0.0;
		lamp_down := fbElevation.fTorque < 0.0;
		
	12:	// manual Telescope Control
		IF key_switch THEN
			lamp_up := fbTelescope.bPower;
			lamp_down := fbTelescope.bPower;
			lamp_left := fbTelescope.bPower;
			lamp_right := fbTelescope.bPower;
	
			fbTelescope.bGoHome := direction_down;
			fbTelescope.bPark := direction_up;
			fbTelescope.bGoto := direction_right;
			TrackingEnable(SET := start_switch, 
							RESET := reset_switch, 
							Q := fbTelescope.bTrack);
			fbTelescope.bReset := reset_switch;
			fbTelescope.bStop := direction_left;	
			lamp_error := fbTelescope.bError;
		END_IF
		
	13: // Telescope Control
		TelescopeControlEnable(
			SET := start_switch, 
			Q := fbTelescope.bPower);
		fbTelescope.bReset := reset_switch;
		IF key_switch THEN
			lamp_up := fbElevation.inDigitalInputs.0;
			lamp_down := fbElevation.inDigitalInputs.1;
			lamp_left := fbAzimuth.inDigitalInputs.0;
			lamp_right := fbAzimuth.inDigitalInputs.1;
			fbElevation.MovePos := direction_up AND fbElevation.inDigitalInputs.0;
			fbElevation.MoveNeg := direction_down AND fbElevation.inDigitalInputs.1;
			fbAzimuth.MoveNeg := direction_left AND fbAzimuth.inDigitalInputs.0;
			fbAzimuth.MovePos := direction_right AND fbAzimuth.inDigitalInputs.1;
			fbTelescope.fRightAscension := fbTelescope.rightascension_calc;
			fbTelescope.fDeclination := fbTelescope.declination_calc;
		ELSE
			lamp_up := fbElevation.bEnable;
			lamp_down := fbElevation.bEnable;
			lamp_left := fbAzimuth.bEnable;
			lamp_right := fbAzimuth.bEnable;
			IF direction_up THEN 
				fbTelescope.fElevationOffset := fbTelescope.fElevationOffset + 10.0/3600.0; 
			ELSIF direction_down THEN 
				fbTelescope.fElevationOffset := fbTelescope.fElevationOffset - 10.0/3600.0; 
			END_IF;
			IF direction_left THEN 
				fbTelescope.fAzimuthOffset := fbTelescope.fAzimuthOffset - 10.0/3600.0; 
			ELSIF direction_right THEN 
				fbTelescope.fAzimuthOffset := fbTelescope.fAzimuthOffset + 10.0/3600.0; 
			END_IF;
		END_IF
		ResetDelay(IN := reset_switch, PT := T#3S);
		// wait for suction pump to stop
		TwinCATRestart(NETID := '', RESTART := ResetDelay.Q AND NOT fbHydraulics.SuctionRunning, TMOUT := T#60S);
	
	14: bHorn := key_switch;
		lamp_up := key_switch;
		lamp_down := key_switch;
		lamp_left := key_switch;
		lamp_right := key_switch;
	
	15:	// Hydraulics control
		lamp_up := fbHydraulics.OilPressureOK AND NOT fbBrake.BrakeOpen;
		lamp_down := fbHydraulics.OilPressureOK AND fbBrake.BrakeOpen;
		lamp_left := fbHydraulics.PumpRunning;
		lamp_right := fbHydraulics.SuctionRunning;
		IF key_switch THEN
			IF fbStartTrigger.Q THEN
				fbHydraulics.Enable := NOT fbHydraulics.Enable;
			END_IF
			IF reset_trigger.Q THEN
				fbHydraulics.Reset();
			END_IF
			
			IF direction_up THEN
				fbBrake.OpenBrake();
			END_IF
			IF direction_down THEN
				fbBrake.CloseBrake();
			END_IF
			fbHydraulics.ManualStartSuction := direction_right;
			fbHydraulics.ManualStopPump := direction_left;
			lamp_error := fbHydraulics.Error;
		END_IF
END_CASE
]]></ST>
    </Implementation>
    <Method Name="FB_Init" Id="{377c4b19-44fb-4929-801b-86205f66218e}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)
	comm			: I_Comm;   
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.comm 	:= comm;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_MonetPendantControl">
      <LineId Id="1" Count="208" />
    </LineIds>
    <LineIds Name="FB_MonetPendantControl.FB_Init">
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>