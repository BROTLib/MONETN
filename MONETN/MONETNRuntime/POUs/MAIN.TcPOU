<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.8">
  <POU Name="MAIN" Id="{0fe844df-7078-44d3-bc48-268e6c994874}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	// telescope drives are ready to enable
	ready:				BOOL;
	// error stat on drive, power or hydraulics
	error:				BOOL;
	// manual, panel or remote reset
	reset:				BOOL;
	// start hydraulics
	start:				BOOL;
	// stop hydraulics 
	stop:				BOOL;
	// soft start trafo
	key_switch:			BOOL;
	//	open brake
	brake_clearing:		BOOL := FALSE;
	
	remote_start:		BOOL;
	remote_stop: 		BOOL;
	remote_reset:		BOOL;
	remote_keyswitch:	BOOL;
	remote_brake_clearing:	BOOL;
	// blink error lamp on warning
	error_lamp: 		FB_BLINK;
	power_lamp:			FB_BLINK;
	sound_horn:			FB_Horn;
	// main cabinet temperature in degrees
	cabinet_temperature:	REAL;
	TemperatureEvent,
	TemperatureCriticalEvent:	FB_EventLog;
	MQTTTimer : 		TON := (PT:=T#5S);
	GetHostName:		FB_GetHostName;
	HostName: 			STRING(255);
//	LightSwitch:		FB_ButtonEnable;
//	Lightbutton: 		BOOL;
	bExecute:			BOOL := TRUE;
	cabinet_temperature_warning		: SR;
	cabinet_temperature_critical	: SR;
	MQTTClient						: FB_Comm_MQTT_Influx;
	RoofControl						: FB_RoofControl;
	CoverControl					: FB_CoverControl;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* 
Main control loop
* Execute sub modules
* power management
* control panel switches and status lamps

* start switch activates Hydraulics and Trafo
* 
*)
GetHostName(bExecute := bExecute, sHostName => HostName);
bExecute := FALSE;
start := GVL_Main.start_switch OR remote_start;
stop := (NOT GVL_Main.stop_switch) OR remote_stop;
key_switch := GVL_Main.key_switch_remote OR remote_keyswitch;
brake_clearing := GVL_Main.brake_clearing OR remote_brake_clearing;
reset := GVL_Main.reset_switch OR GVL_pendant_control.reset_switch OR remote_reset;		
brake_clearing := NOT GVL_Main.brake_clearing;
cabinet_temperature := INT_TO_REAL(GVL_Main.main_cabinet_temperature) / 10.0;
cabinet_temperature_warning(SET1 := cabinet_temperature > 50.0,
							RESET := cabinet_temperature < 40.0);
cabinet_temperature_critical(SET1 := cabinet_temperature > 60.0,
							RESET := cabinet_temperature < 50.0);

IF start THEN
	HydraulicsControl.enable := TRUE;
END_IF
IF stop THEN
	HydraulicsControl.enable := FALSE;
END_IF

// telescope is ready when power available
ready :=  TRUE;

// QUINT UPS control section
(*
ups(
	xActivate:= xActivate, 
	arrInputPD:= arrInputPD, 
	xActive=> , 
	xError=> , 
	wDiagCode=> , 
	wAddDiagCode=> , 
	wOutputVoltage=> ups_output_voltage, 
	wOutputCurrent=> ups_output_current, 
	xBatModeActive=> , 
	udtDataStruct=> , 
	xAlarm=> , 
	xWarning=> , 
	xReplaceBattery=> , 
	udtDiag=> );
	
ups_output_voltage := ups_output_voltage / 1000.0;
ups_output_current := ups_output_current / 1000.0;
ups_output_power := ups_output_voltage * ups_output_current;
*)

TelescopeControl(CoverControl := CoverControl);	//
CoverControl(
	comm				:= MQTTClient
);
PendantControl(CoverControl := CoverControl);	//
HydraulicsControl();	//
ElevationControl(CoverControl := CoverControl);	//
AzimuthElevationControl();	//
DerotatorControl();	//
FocusControl();
RoofControl(
	min_speed			:= 10000,
	max_speed 			:= 30000, 
	acceleration 		:= 150,
	min_position 		:= 0,
	max_position 		:= 202,
	max_position_diff	:= 2,
	limit_slowdown		:= 5,
	comm				:= MQTTClient
);
MQTTClient(	
	sHostName	:= '169.254.146.10',
    nHostPort   := 1883,
    nKeepAlive  := 60,
	sTopicSub   := 'MONETN/Telescope/SET'
);


error := GVL_Telescope.azimut_limit_switch
			OR Focuscontrol.Error
			OR CoverControl.Error;
//error := FALSE; // Todo: remove
// set control lights					
GVL_Main.lamp_on_manual := PendantControl.manual;

IF GVL_Safety.Error THEN
	error_lamp.blink := e_blink.short;
ELSIF ElevationControl.error OR AzimuthElevationControl.error OR DerotatorControl.Error THEN
	error_lamp.blink := e_blink.long;
ELSIF HydraulicsControl.oil_warning OR HydraulicsControl.oil_hot OR HydraulicsControl.pressure_failure THEN
	error_lamp.blink := e_blink.slow;
ELSIF error THEN
	error_lamp.blink := e_blink.on;
ELSE
	error_lamp.blink := e_blink.off; 
END_IF

power_lamp.blink := e_blink.on;
error_lamp(Q => GVL_Main.lamp_error);
//GVL_Main.lamp_error := error_lamp.Q;
power_lamp(Q => GVL_Main.lamp_power);
//GVL_Main.lamp_power := power_lamp.Q;

IF GVL_Telescope.azimut_limit_switch THEN
	sound_horn.horn := E_horn.long;
ELSIF Hydraulicscontrol.suction_failure THEN
	sound_horn.horn := E_horn.long;
ELSIF TelescopeControl.poweronwarning.Q THEN
	sound_horn.horn := E_horn.short;
ELSIF Pendantcontrol.horn THEN
	sound_horn.horn := E_horn.beep;
ELSE
	sound_horn.horn := E_horn.off;
END_IF 

sound_horn(Q => GVL_Telescope.horn );

SafetyHandling();

MQTTTimer(IN:=TRUE);
IF MQTTTimer.Q THEN // publish new payload every second
	MQTTTimer(IN:=FALSE);
	MQTTClient.Publish('electronics', 'base', 'MainCabinetTemperature', LREAL_TO_FMTSTR(cabinet_temperature, 2, TRUE));
	MQTTClient.Publish('electronics', 'base', 'MainReady', BOOL_TO_STRING(ready));
	MQTTClient.Publish('electronics', 'base', 'MasterError', BOOL_TO_STRING(error));
END_IF


TemperatureEvent(	
	Trigger := 		cabinet_temperature_warning.Q1, 
	Level := 		ADSLOG_MSGTYPE_WARN,
	FormatString :=	'Main cabinet temperature warning:	%s',
	OnMessage := 	LREAL_TO_FMTSTR( cabinet_temperature, 1, TRUE),);
TemperatureCriticalEvent(	
	Trigger := 		cabinet_temperature_critical.Q1, 
	Level := 		ADSLOG_MSGTYPE_ERROR,
	FormatString :=	'Main cabinet temperature is critical:	%s!',
	OnMessage := 	LREAL_TO_FMTSTR( cabinet_temperature, 1, TRUE),);


]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="655" Count="21" />
      <LineId Id="686" Count="2" />
      <LineId Id="690" Count="2" />
      <LineId Id="694" Count="1" />
      <LineId Id="888" Count="1" />
      <LineId Id="1023" Count="0" />
      <LineId Id="994" Count="0" />
      <LineId Id="1196" Count="0" />
      <LineId Id="1008" Count="13" />
      <LineId Id="1002" Count="0" />
      <LineId Id="1022" Count="0" />
      <LineId Id="1001" Count="0" />
      <LineId Id="1069" Count="1" />
      <LineId Id="1068" Count="0" />
      <LineId Id="1197" Count="0" />
      <LineId Id="1000" Count="0" />
      <LineId Id="1398" Count="1" />
      <LineId Id="1397" Count="0" />
      <LineId Id="1400" Count="0" />
      <LineId Id="703" Count="3" />
      <LineId Id="708" Count="0" />
      <LineId Id="1379" Count="8" />
      <LineId Id="1369" Count="0" />
      <LineId Id="1320" Count="5" />
      <LineId Id="943" Count="0" />
      <LineId Id="718" Count="0" />
      <LineId Id="722" Count="0" />
      <LineId Id="724" Count="0" />
      <LineId Id="1238" Count="0" />
      <LineId Id="728" Count="1" />
      <LineId Id="832" Count="0" />
      <LineId Id="829" Count="1" />
      <LineId Id="842" Count="0" />
      <LineId Id="844" Count="0" />
      <LineId Id="833" Count="0" />
      <LineId Id="835" Count="0" />
      <LineId Id="840" Count="1" />
      <LineId Id="838" Count="1" />
      <LineId Id="831" Count="0" />
      <LineId Id="884" Count="0" />
      <LineId Id="854" Count="0" />
      <LineId Id="859" Count="0" />
      <LineId Id="730" Count="0" />
      <LineId Id="860" Count="0" />
      <LineId Id="731" Count="0" />
      <LineId Id="865" Count="0" />
      <LineId Id="864" Count="0" />
      <LineId Id="867" Count="1" />
      <LineId Id="870" Count="1" />
      <LineId Id="873" Count="0" />
      <LineId Id="878" Count="1" />
      <LineId Id="875" Count="1" />
      <LineId Id="866" Count="0" />
      <LineId Id="880" Count="0" />
      <LineId Id="862" Count="0" />
      <LineId Id="861" Count="0" />
      <LineId Id="732" Count="1" />
      <LineId Id="744" Count="3" />
      <LineId Id="750" Count="1" />
      <LineId Id="760" Count="0" />
      <LineId Id="1031" Count="1" />
      <LineId Id="768" Count="8" />
      <LineId Id="474" Count="0" />
      <LineId Id="1126" Count="0" />
      <LineId Id="1054" Count="0" />
      <LineId Id="1034" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>