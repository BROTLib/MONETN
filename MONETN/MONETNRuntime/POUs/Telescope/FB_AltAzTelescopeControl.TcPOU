<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="FB_AltAzTelescopeControl" Id="{ab7ff9f6-f0dc-473a-bd67-87367819c272}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AltAzTelescopeControl EXTENDS FB_BaseTelescopeControl
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	eq2hor				: FB_EQ2HOR;
	hor2eq				: FB_HOR2EQ;
	
	fElevationCalc		: LREAL;	// elevation calulated when ra and dec are set by TCS 
	fAzimuthCalc		: LREAL;	// azimuth calulated when ra and dec are set by TCS
	fHourAngleCalc		: LREAL;	// hour angle calulated when ra and dec are set by TCS
	fDerotatorCalc		: LREAL;
	fRightAscensionCalc	: LREAL;	// right ascension calculated from current Alt/Az
	fDeclinationCalc	: LREAL;	// declination calculated from current Alt/Az
	
	fElevationOffset	: LREAL := 0.0;		// absolute offset for elevation
	fAzimuthOffset 		: LREAL := 0.0;		// absolute offset for azimuth
	fDerotatorOffset	: LREAL := 0.0;		// offset for the de-rotator
	
	fDerotatorVelocity	: LREAL;	// rotational velocity of the derotator
	fElevationVelocity	: LREAL;	// rotational velocity of the elevation
	fAzimuthVelocity	: LREAL;	// rotational velocity of the elevation
	
	fElevationCurrent   : LREAL;	// true position of the elevation
	fAzimuthCurrent     : LREAL;	// true position of the azimuth
	fDerotatorCurrent	: LREAL;	// true position of the de-rotator
	
	fElevationPointing  	: LREAL;	// true position of the elevation with applied pointing model
	fAzimuthPointing    	: LREAL;	// true position of the azimuth with applied pointing model
	fRightAscensionPointing	: LREAL;	// RA from pointing Az/El
	fDeclinationPointing	: LREAL;	// Dec from pointing Az/El
	
	fDerotationSign	: LREAL := 1.0;	// sign of derotation
END_VAR
VAR PERSISTENT
	EOFF				: LREAL;	// elevation encoder zero offset
	AN_E				: LREAL;	// azimuth axis offset/misalignment north-south
	AE_E				: LREAL;	// azimuth axis offset/misalignment east-west
	TF					: LREAL;	// gravitational flexure correction at the horizon
	AOFF				: LREAL;	// azimuth encoder zero offset
	BNP					: LREAL;	// collimation error of the electromagnetic axis
	AN_A				: LREAL;	// azimuth axis offset/misalignment north-south
	AE_A				: LREAL;	// azimuth axis offset/misalignment east-west,
	NPAE				: LREAL;	// Non-perpendicularity between the mount azimuth and elevation axes
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// RA/Dec to Alt/Az/HA
eq2hor(
	ra := fRightAscension,
	dec := fDeclination,
	lon := telescopeConfig.longitude,
	lat := telescopeConfig.latitude,
	JD := fJD,
	alt => fElevationCalc,
	az => fAzimuthCalc,
	ha => fHourAngleCalc);
	
// apply pointing model
fElevationCalc := fElevationCalc + PointingModelElevation(fAzimuthCalc, fElevationCalc, EOFF + fElevationOffset, AN_E, AE_E, TF);
fAzimuthCalc := fAzimuthCalc + PointingModelAzimuth(fAzimuthCalc, fElevationCalc, AOFF + fAzimuthOffset, BNP, AN_A, AE_A, NPAE);

// calculate derotator position 
fDerotatorCalc := F_DerotatorPosition2(fAzimuthCalc, fElevationCalc, fDeclinationCalc, telescopeConfig.latitude, fDerotationSign) + fDerotatorOffset;

// calculate velocities
fDerotatorVelocity := F_Derotatorvelocity(fElevationCalc, fAzimuthCalc, telescopeConfig.latitude);
fElevationVelocity := F_Elevationvelocity(fAzimuthCalc, telescopeConfig.latitude);
fAzimuthVelocity := F_Azimuthvelocity(fElevationCalc, fAzimuthCalc, telescopeConfig.latitude);

// clip azimuth to limits
IF (fAzimuthCalc > 310.0 AND fAzimuthVelocity > 0.0) OR (fAzimuthCalc > 440.0) THEN
	fAzimuthCalc := fAzimuthCalc - 360.0;
ELSIF (fAzimuthCalc < 80.0 AND fAzimuthVelocity < 0.0) OR (fAzimuthCalc < -50.0) THEN
	fAzimuthCalc := fAzimuthCalc + 360.0;
END_IF

// clip derotator to limits
IF (fDerotatorCalc > 290.0 AND fDerotatorVelocity > 0.0) OR (fDerotatorCalc > 380.0) THEN
	fDerotatorCalc := fDerotatorCalc - 360.0;
ELSIF (fDerotatorCalc < 20.0 AND fDerotatorVelocity < 0.0) OR (fDerotatorCalc < -70.0) THEN
	fDerotatorCalc := fDerotatorCalc + 360.0;
END_IF

// apply pointing model
fElevationPointing := fElevationCurrent - PointingModelElevation(fAzimuthCurrent, fElevationCurrent, EOFF, AN_E, AE_E, TF);
fAzimuthPointing := fAzimuthCurrent - PointingModelAzimuth(fAzimuthCurrent, fElevationCurrent, AOFF, BNP, AN_A, AE_A, NPAE);

// add offsets
fElevationCurrent := fElevationPointing - fElevationOffset;
fAzimuthCurrent := fAzimuthPointing - fAzimuthOffset;

// calculate equatorial coordinates
hor2eq(alt := fElevationCurrent, 
		az := fAzimuthCurrent,
		jd := fJD,
		lat := telescopeConfig.latitude,
		lon := telescopeConfig.longitude,
		altitude := telescopeConfig.altitude,
		ra => fRightAscensionCalc,
		dec => fDeclinationCalc);		
hor2eq(alt := fElevationPointing, 
		az := fAzimuthPointing,
		jd := fJD,
		lat := telescopeConfig.latitude,
		lon := telescopeConfig.longitude,
		altitude := telescopeConfig.altitude,
		ra => fRightAscensionPointing,
		dec => fDeclinationPointing);]]></ST>
    </Implementation>
    <LineIds Name="FB_AltAzTelescopeControl">
      <LineId Id="54" Count="0" />
      <LineId Id="17" Count="7" />
      <LineId Id="9" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="45" Count="2" />
      <LineId Id="84" Count="0" />
      <LineId Id="48" Count="1" />
      <LineId Id="85" Count="0" />
      <LineId Id="50" Count="3" />
      <LineId Id="130" Count="0" />
      <LineId Id="86" Count="5" />
      <LineId Id="129" Count="0" />
      <LineId Id="92" Count="6" />
      <LineId Id="104" Count="23" />
      <LineId Id="44" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>