<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.8">
  <POU Name="FB_MonetFocusControl" Id="{27922653-650e-4327-85ba-374d2f945b2c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MonetFocusControl EXTENDS FB_BaseAxis IMPLEMENTS I_Focus
VAR_INPUT
	fMinPosition		: LREAL := 0;	// minimum position
	fMaxPosition		: LREAL := 100;	// maximum position
	eTelescopeMode		: E_TelescopeMode;
	fHomingPosition		: LREAL := 92.02; // 104.02 - 12.00 	// reference position for homing
	fTolerance			: LREAL := 0.005;
END_VAR
VAR_OUTPUT
	bFocusUnlocked		: BOOL;
END_VAR
VAR
	bMoveAxis			: BOOL;		// move the axis to new position
	ObFocusUnlock AT%Q* : BOOL;		// whether focus is unlocked
	tonFocusDelay		: TON;
	tonBrakeDelay		: TON;
	fActualPosition		: LREAL;
	bManualUnlock		: BOOL;		// manual override to unlock the focus
	tonMqttTimer 		: TON := (PT:=T#5S);
	//getlastposition:	BOOL := TRUE;
	fbAxisEvent			: FB_EventLog;
	fbCalibrationEvent	: FB_EventLog;
	eHomingMode			: MC_HOMINGMODE := MC_DefaultHoming;
	fbSetPosition		: MC_SetPosition;
	
	IbLimitNear    AT%I*: BOOL;	// DIN29 3.4
	IbLimitFar     AT%I*: BOOL;	// DIN30 3.5
	refAxis			: AXIS_REF;
END_VAR
VAR PERSISTENT
	fLastPposition		: LREAL := -1.0;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
Focus Control Unit
spindle gear: 5mm
brake: 86 61103H00 Var. 0005 Index C; 24VDC geglattet 0,25 A P1672/R7
motor: Faulhaber ; Schönaich ; 3557K024CR; 454  431 ; Made in germany ==> 5300 rpm
gear: Faulhaber ; MINIMOTOR SA ; swiss made ; 38/1S  43:1 ; 033896  503
Focus is locked by default
70,8W; 0,100A no load current; 2,0 Terminal resistance; 1,950A max Current 
*)

// limit to sane positions
fPosition := LIMIT(fMinPosition, fPosition, fMaxPosition);

// focus is unlocked if enabled or manually unlocked and no eror
ObFocusUnlock := (bManualUnlock OR bEnable) AND NOT bError;

// wait until the focus is unlocked for n milliseconds
tonFocusDelay(IN := ObFocusUnlock, PT := T#500MS, Q => bFocusUnlocked);
// wait for brake until we are at rest
tonBrakeDelay(IN := NOT fbAxis.Busy AND fbAxis.StandStill, PT := T#4000MS);

// if we are on automatic mode then position the focus
IF eTelescopeMode = E_TelescopeMode.automatic AND NOT bManualUnlock THEN
	IF fbAxis.calibrated THEN
		IF ABS(fPosition - fActualPosition) > fTolerance THEN
			IF fbAxis.Ready THEN
				bMoveAxis := TRUE;
			ELSE
				bEnable := TRUE;
			END_IF
		END_IF
		// disable the drive and lock the brake, if we stand for more than n seconds
		IF tonBrakeDelay.Q THEN
			bEnable := FALSE;
		END_IF
		// store actual position, if we are calibrated and locked
		IF NOT ObFocusUnlock THEN
			fLastPposition := fActualPosition;
		END_IF
	ELSE // not calibrated
		IF fbAxis.Ready THEN
			bHomeAxis := TRUE;
		END_IF
	END_IF
END_IF

IF bHomeAxis THEN
	IF fLastPposition > 0.0 THEN
		eHomingMode := MC_ForceCalibration; // MC_Direct
		fPosition := fLastPposition;
		fbSetPosition.Execute := TRUE;
	ELSE
		eHomingMode := MC_DefaultHoming;
		fPosition := fHomingPosition;
		fbSetPosition.Execute := FALSE;
	END_IF
ELSE
	fbSetPosition.Execute := FALSE;	
END_IF

// deactivate limit switches on homing
MC_SetAcceptBlockedDriveSignal(Axis := refAxis, enable := bHomeAxis);
fbSetPosition(Axis := refAxis, Position := fLastPposition);
		
fbAxis(	
	enable 			:= bFocusUnlocked,
	Reset 			:= bReset,
	moveAxis 		:= bMoveAxis AND bFocusUnlocked,
	homeAxis 		:= bHomeAxis AND bFocusUnlocked,
	homingMode 		:= eHomingMode,
	Position 		:= fPosition,
	Velocity 		:= fVelocity,
	enable_Positive := NOT IbLimitFar OR bHomeAxis,
	enable_Negative := NOT IbLimitNear,
	Jog_Forward 	:= bMovePos AND bFocusUnlocked,
	Jog_Backwards 	:= bMoveNeg AND bFocusUnlocked,
	bCalibrationCam := IbLimitFar,
	ActualPosition 	=> fActualPosition,
	Error 			=> bError,
	ErrorID 		=> nErrorID,
	axisRef 		:= refAxis);	

IF fbAxis.MoveDone THEN
	bMoveAxis := FALSE;
END_IF

IF fbAxis.HomeDone THEN
	bHomeAxis := FALSE;
	bEnable := FALSE;
	fLastPposition := fPosition;
END_IF
	
IF fbAxis.ResetDone THEN
	bReset := FALSE;
END_IF

IF fbAxis.calibrated OR bError THEN
	bHomeAxis := FALSE;
END_IF

IF bError THEN
	fLastPposition := -1.0;
	//focusAxis.calibrated := FALSE;
	bCalibrated := FALSE;
END_IF

bCalibrated := fbAxis.calibrated;
bReady := fbAxis.Ready AND fbAxis.StandStill OR NOT ObFocusUnlock;

SendTelemetry();
HandleEvents();]]></ST>
    </Implementation>
    <Method Name="HandleEvents" Id="{375f50c9-e6ea-4fcd-9fab-a26147b70ce8}">
      <Declaration><![CDATA[METHOD PRIVATE HandleEvents : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbAxisEvent(	
	Trigger 		:= fbAxis.Error, 
	Level 			:= ADSLOG_MSGTYPE_ERROR,
	FormatString	:= 'Focus Axis Error: %S',
	OnMessage 		:= NCError_TO_STRING(nErrorID),
	OffMEssage 		:= 'OK',
	OffLevel 		:= ADSLOG_MSGTYPE_HINT,
	comm 			:= fbComm);

fbCalibrationEvent(
	Trigger 		:=	bCalibrated,
	Level 			:=	ADSLOG_MSGTYPE_HINT,
	OnMessage 		:= 'Focus is calibrated.',
	comm 			:= fbComm);
]]></ST>
      </Implementation>
    </Method>
    <Property Name="InNegLimit" Id="{1d25a9c6-c26c-4c20-9f13-eca88477ee48}">
      <Declaration><![CDATA[PROPERTY PUBLIC InNegLimit : BOOL]]></Declaration>
      <Get Name="Get" Id="{88be5ca6-56e1-4d6b-8cc7-729df9681a1a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[InNegLimit := IbLimitNear;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="InPosLimit" Id="{66e2cfb2-3f2c-47bf-8a02-ad3ba18a05bd}">
      <Declaration><![CDATA[PROPERTY PUBLIC InPosLimit : BOOL]]></Declaration>
      <Get Name="Get" Id="{d6be74e5-be21-4625-abd6-363742161882}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[InPosLimit := IbLimitFar;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="SendTelemetry" Id="{9492de4d-6d2e-401c-bc97-10786d283636}">
      <Declaration><![CDATA[METHOD PRIVATE SendTelemetry : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[tonMqttTimer(IN:=TRUE);
IF tonMqttTimer.Q THEN // publish new payload every second
	tonMqttTimer(IN:=FALSE);
	fbComm.Publish('telescope', 'dome', 'FocusPosition', LREAL_TO_FMTSTR(fActualPosition, 5, TRUE));
	fbComm.Publish('telescope', 'dome', 'Focuscalibrated', BOOL_TO_STRING(bCalibrated));	
	fbComm.Publish('telescope', 'dome', 'FocusReady', BOOL_TO_STRING(bReady));	
END_IF
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_MonetFocusControl">
      <LineId Id="1" Count="110" />
    </LineIds>
    <LineIds Name="FB_MonetFocusControl.HandleEvents">
      <LineId Id="1" Count="14" />
    </LineIds>
    <LineIds Name="FB_MonetFocusControl.InNegLimit.Get">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_MonetFocusControl.InPosLimit.Get">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_MonetFocusControl.SendTelemetry">
      <LineId Id="1" Count="7" />
    </LineIds>
  </POU>
</TcPlcObject>